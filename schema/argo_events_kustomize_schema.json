{
    "definitions": {
        "io.argoproj.eventbus.v1alpha1.BusConfig": {
            "description": "BusConfig has the finalized configuration for EventBus",
            "type": "object",
            "properties": {
                "jetstream": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.JetStreamConfig"
                },
                "nats": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NATSConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BusConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.ContainerTemplate": {
            "description": "ContainerTemplate defines customized spec for a container",
            "type": "object",
            "properties": {
                "imagePullPolicy": {
                    "type": "string"
                },
                "resources": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "securityContext": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBus": {
            "description": "EventBus is the definition of a eventbus resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.EventBusSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.EventBusStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBusList": {
            "description": "EventBusList is the list of eventbus resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.EventBus"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBusList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBusSpec": {
            "description": "EventBusSpec refers to specification of eventbus resource",
            "type": "object",
            "properties": {
                "jetstream": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.JetStreamBus"
                },
                "nats": {
                    "description": "NATS eventbus",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NATSBus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBusSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.EventBusStatus": {
            "description": "EventBusStatus holds the status of the eventbus resource",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions are the latest available observations of a resource's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Condition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "config": {
                    "description": "Config holds the fininalized configuration of EventBus",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.BusConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventBusStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.JetStreamBus": {
            "description": "JetStreamBus holds the JetStream EventBus information",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "The pod's scheduling constraints More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "containerTemplate": {
                    "description": "ContainerTemplate contains customized spec for Nats JetStream container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "maxPayload": {
                    "description": "Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "metricsContainerTemplate": {
                    "description": "MetricsContainerTemplate contains customized spec for metrics container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "persistence": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the Redis pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the Redis pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "reloaderContainerTemplate": {
                    "description": "ReloaderContainerTemplate contains customized spec for config reloader container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "replicas": {
                    "description": "Redis StatefulSet size",
                    "type": "integer",
                    "format": "int32"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName to apply to the StatefulSet",
                    "type": "string"
                },
                "settings": {
                    "description": "JetStream configuration, if not specified, global settings in controller-config will be used. See https://docs.nats.io/running-a-nats-service/configuration#jetstream. Only configure \"max_memory_store\" or \"max_file_store\", do not set \"store_dir\" as it has been hardcoded.",
                    "type": "string"
                },
                "startArgs": {
                    "description": "Optional arguments to start nats-server. For example, \"-D\" to enable debugging output, \"-DV\" to enable debugging and tracing. Check https://docs.nats.io/ for all the available arguments.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "streamConfig": {
                    "description": "Optional configuration for the streams to be created in this JetStream service, if specified, it will be merged with the default configuration in controller-config. It accepts a YAML format configuration, available fields include, \"maxBytes\", \"maxMsgs\", \"maxAge\" (e.g. 72h), \"replicas\" (1, 3, 5), \"duplicates\" (e.g. 5m).",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "version": {
                    "description": "JetStream version, such as \"2.7.3\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JetStreamBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.JetStreamConfig": {
            "type": "object",
            "properties": {
                "accessSecret": {
                    "description": "Secret for auth",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "streamConfig": {
                    "type": "string"
                },
                "url": {
                    "description": "JetStream (Nats) URL",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "JetStreamConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.NATSBus": {
            "description": "NATSBus holds the NATS eventbus information",
            "type": "object",
            "properties": {
                "exotic": {
                    "description": "Exotic holds an exotic NATS config",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NATSConfig"
                },
                "native": {
                    "description": "Native means to bring up a native NATS service",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.NativeStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSBus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.NATSConfig": {
            "description": "NATSConfig holds the config of NATS",
            "type": "object",
            "properties": {
                "accessSecret": {
                    "description": "Secret for auth",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "auth": {
                    "description": "Auth strategy, default to AuthStrategyNone",
                    "type": "string"
                },
                "clusterID": {
                    "description": "Cluster ID for nats streaming",
                    "type": "string"
                },
                "url": {
                    "description": "NATS streaming url",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.NativeStrategy": {
            "description": "NativeStrategy indicates to install a native NATS service",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "The pod's scheduling constraints More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "auth": {
                    "type": "string"
                },
                "containerTemplate": {
                    "description": "ContainerTemplate contains customized spec for NATS container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "maxAge": {
                    "description": "Max Age of existing messages, i.e. \"72h\", “4h35m”",
                    "type": "string"
                },
                "maxBytes": {
                    "description": "Total size of messages per channel, 0 means unlimited. Defaults to 1GB",
                    "type": "string"
                },
                "maxMsgs": {
                    "description": "Maximum number of messages per channel, 0 means unlimited. Defaults to 1000000",
                    "type": "integer",
                    "format": "int64"
                },
                "maxPayload": {
                    "description": "Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB",
                    "type": "string"
                },
                "maxSubs": {
                    "description": "Maximum number of subscriptions per channel, 0 means unlimited. Defaults to 1000",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "metricsContainerTemplate": {
                    "description": "MetricsContainerTemplate contains customized spec for metrics container",
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "persistence": {
                    "$ref": "#/definitions/io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "raftCommitTimeout": {
                    "description": "Specifies the time without an Apply() operation before sending an heartbeat to ensure timely commit, i.e. \"72h\", “4h35m”. Defaults to 100ms",
                    "type": "string"
                },
                "raftElectionTimeout": {
                    "description": "Specifies the time in candidate state without a leader before attempting an election, i.e. \"72h\", “4h35m”. Defaults to 2s",
                    "type": "string"
                },
                "raftHeartbeatTimeout": {
                    "description": "Specifies the time in follower state without a leader before attempting an election, i.e. \"72h\", “4h35m”. Defaults to 2s",
                    "type": "string"
                },
                "raftLeaseTimeout": {
                    "description": "Specifies how long a leader waits without being able to contact a quorum of nodes before stepping down as leader, i.e. \"72h\", “4h35m”. Defaults to 1s",
                    "type": "string"
                },
                "replicas": {
                    "description": "Size is the NATS StatefulSet size",
                    "type": "integer",
                    "format": "int32"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName to apply to NATS StatefulSet",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NativeStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventbus.v1alpha1.PersistenceStrategy": {
            "description": "PersistenceStrategy defines the strategy of persistence",
            "type": "object",
            "properties": {
                "accessMode": {
                    "description": "Available access modes such as ReadWriteOnce, ReadWriteMany https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes",
                    "type": "string"
                },
                "storageClassName": {
                    "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                    "type": "string"
                },
                "volumeSize": {
                    "description": "Volume size, e.g. 10Gi",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PersistenceStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig": {
            "description": "AMQPConsumeConfig holds the configuration to immediately starts delivering queued messages",
            "type": "object",
            "properties": {
                "autoAck": {
                    "description": "AutoAck when true, the server will acknowledge deliveries to this consumer prior to writing the delivery to the network",
                    "type": "boolean"
                },
                "consumerTag": {
                    "description": "ConsumerTag is the identity of the consumer included in every delivery",
                    "type": "string"
                },
                "exclusive": {
                    "description": "Exclusive when true, the server will ensure that this is the sole consumer from this queue",
                    "type": "boolean"
                },
                "noLocal": {
                    "description": "NoLocal flag is not supported by RabbitMQ",
                    "type": "boolean"
                },
                "noWait": {
                    "description": "NowWait when true, do not wait for the server to confirm the request and immediately begin deliveries",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPConsumeConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPEventSource": {
            "description": "AMQPEventSource refers to an event-source for AMQP stream events",
            "type": "object",
            "required": [
                "exchangeName",
                "exchangeType",
                "routingKey"
            ],
            "properties": {
                "auth": {
                    "description": "Auth hosts secret selectors for username and password",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "consume": {
                    "description": "Consume holds the configuration to immediately starts delivering queued messages For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.Consume",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig"
                },
                "exchangeDeclare": {
                    "description": "ExchangeDeclare holds the configuration for the exchange on the server For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.ExchangeDeclare",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig"
                },
                "exchangeName": {
                    "description": "ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html",
                    "type": "string",
                    "default": ""
                },
                "exchangeType": {
                    "description": "ExchangeType is rabbitmq exchange type",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "queueBind": {
                    "description": "QueueBind holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueBind",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig"
                },
                "queueDeclare": {
                    "description": "QueueDeclare holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueDeclare",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig"
                },
                "routingKey": {
                    "description": "Routing key for bindings",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the amqp client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL for rabbitmq service",
                    "type": "string"
                },
                "urlSecret": {
                    "description": "URLSecret is secret reference for rabbitmq service URL",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig": {
            "description": "AMQPExchangeDeclareConfig holds the configuration for the exchange on the server",
            "type": "object",
            "properties": {
                "autoDelete": {
                    "description": "AutoDelete removes the exchange when no bindings are active",
                    "type": "boolean"
                },
                "durable": {
                    "description": "Durable keeps the exchange also after the server restarts",
                    "type": "boolean"
                },
                "internal": {
                    "description": "Internal when true does not accept publishings",
                    "type": "boolean"
                },
                "noWait": {
                    "description": "NowWait when true does not wait for a confirmation from the server",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPExchangeDeclareConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig": {
            "description": "AMQPQueueBindConfig holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key",
            "type": "object",
            "properties": {
                "noWait": {
                    "description": "NowWait false and the queue could not be bound, the channel will be closed with an error",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPQueueBindConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig": {
            "description": "AMQPQueueDeclareConfig holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters",
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments of a queue (also known as \"x-arguments\") used for optional features and plugins",
                    "type": "string"
                },
                "autoDelete": {
                    "description": "AutoDelete removes the queue when no consumers are active",
                    "type": "boolean"
                },
                "durable": {
                    "description": "Durable keeps the queue also after the server restarts",
                    "type": "boolean"
                },
                "exclusive": {
                    "description": "Exclusive sets the queues to be accessible only by the connection that declares them and will be deleted wgen the connection closes",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the queue. If empty the server auto-generates a unique name for this queue",
                    "type": "string"
                },
                "noWait": {
                    "description": "NowWait when true, the queue assumes to be declared on the server",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AMQPQueueDeclareConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource": {
            "description": "AzureEventsHubEventSource describes the event source for azure events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/",
            "type": "object",
            "required": [
                "fqdn",
                "hubName"
            ],
            "properties": {
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "fqdn": {
                    "description": "FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string",
                    "type": "string",
                    "default": ""
                },
                "hubName": {
                    "description": "Event Hub path/name",
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sharedAccessKey": {
                    "description": "SharedAccessKey is the generated value of the key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "sharedAccessKeyName": {
                    "description": "SharedAccessKeyName is the name you chose for your application's SAS keys",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureEventsHubEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketAuth": {
            "description": "BitbucketAuth holds the different auth strategies for connecting to Bitbucket",
            "type": "object",
            "properties": {
                "basic": {
                    "description": "Basic is BasicAuth auth strategy.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth"
                },
                "oauthToken": {
                    "description": "OAuthToken refers to the K8s secret that holds the OAuth Bearer token.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth": {
            "description": "BasicAuth holds the information required to authenticate user via basic auth mechanism",
            "type": "object",
            "required": [
                "username",
                "password"
            ],
            "properties": {
                "password": {
                    "description": "Password refers to the K8s secret that holds the password.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "username": {
                    "description": "Username refers to the K8s secret that holds the username.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketBasicAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketEventSource": {
            "description": "BitbucketEventSource describes the event source for Bitbucket",
            "type": "object",
            "required": [
                "webhook",
                "auth",
                "events"
            ],
            "properties": {
                "auth": {
                    "description": "Auth information required to connect to Bitbucket.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketAuth"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the defined Bitbucket hook once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events this webhook is subscribed to.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will be passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "DeprecatedOwner is the owner of the repository. Deprecated: use Repositories instead. Will be unsupported in v1.9",
                    "type": "string"
                },
                "projectKey": {
                    "description": "DeprecatedProjectKey is the key of the project to which the repository relates Deprecated: use Repositories instead. Will be unsupported in v1.9",
                    "type": "string"
                },
                "repositories": {
                    "description": "Repositories holds a list of repositories for which integration needs to set up",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketRepository"
                    }
                },
                "repositorySlug": {
                    "description": "DeprecatedRepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL Deprecated: use Repositories instead. Will be unsupported in v1.9",
                    "type": "string"
                },
                "webhook": {
                    "description": "Webhook refers to the configuration required to run an http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketRepository": {
            "type": "object",
            "required": [
                "owner",
                "repositorySlug"
            ],
            "properties": {
                "owner": {
                    "description": "Owner is the owner of the repository",
                    "type": "string",
                    "default": ""
                },
                "repositorySlug": {
                    "description": "RepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource": {
            "description": "BitbucketServerEventSource refers to event-source related to Bitbucket Server events",
            "type": "object",
            "required": [
                "events",
                "bitbucketserverBaseURL"
            ],
            "properties": {
                "accessToken": {
                    "description": "AccessToken is reference to K8s secret which holds the bitbucket api access information",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bitbucketserverBaseURL": {
                    "description": "BitbucketServerBaseURL is the base URL for API requests to a custom endpoint",
                    "type": "string",
                    "default": ""
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events are bitbucket event to listen to. Refer https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projectKey": {
                    "description": "DeprecatedProjectKey is the key of project for which integration needs to set up Deprecated: use Repositories instead. Will be unsupported in v1.8",
                    "type": "string"
                },
                "repositories": {
                    "description": "Repositories holds a list of repositories for which integration needs to set up",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketServerRepository"
                    }
                },
                "repositorySlug": {
                    "description": "DeprecatedRepositorySlug is the slug of the repository for which integration needs to set up Deprecated: use Repositories instead. Will be unsupported in v1.8",
                    "type": "string"
                },
                "webhook": {
                    "description": "Webhook holds configuration to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                },
                "webhookSecret": {
                    "description": "WebhookSecret is reference to K8s secret which holds the bitbucket webhook secret (for HMAC validation)",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketServerEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.BitbucketServerRepository": {
            "type": "object",
            "required": [
                "projectKey",
                "repositorySlug"
            ],
            "properties": {
                "projectKey": {
                    "description": "ProjectKey is the key of project for which integration needs to set up",
                    "type": "string",
                    "default": ""
                },
                "repositorySlug": {
                    "description": "RepositorySlug is the slug of the repository for which integration needs to set up",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BitbucketServerRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.CalendarEventSource": {
            "description": "CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed. Schedule takes precedence over interval; interval takes precedence over recurrence",
            "type": "object",
            "properties": {
                "exclusionDates": {
                    "description": "ExclusionDates defines the list of DATE-TIME exceptions for recurring events.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "interval": {
                    "description": "Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...",
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "persistence": {
                    "description": "Persistence hold the configuration for event persistence",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventPersistence"
                },
                "schedule": {
                    "description": "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
                    "type": "string",
                    "default": ""
                },
                "timezone": {
                    "description": "Timezone in which to run the schedule",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CalendarEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.CatchupConfiguration": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enabled enables to triggered the missed schedule when eventsource restarts",
                    "type": "boolean"
                },
                "maxDuration": {
                    "description": "MaxDuration holds max catchup duration",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CatchupConfiguration",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.ConfigMapPersistence": {
            "type": "object",
            "properties": {
                "createIfNotExist": {
                    "description": "CreateIfNotExist will create configmap if it doesn't exists",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the configmap",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConfigMapPersistence",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EmitterEventSource": {
            "description": "EmitterEventSource describes the event source for emitter More info at https://emitter.io/develop/getting-started/",
            "type": "object",
            "required": [
                "broker",
                "channelKey",
                "channelName"
            ],
            "properties": {
                "broker": {
                    "description": "Broker URI to connect to.",
                    "type": "string",
                    "default": ""
                },
                "channelKey": {
                    "description": "ChannelKey refers to the channel key",
                    "type": "string",
                    "default": ""
                },
                "channelName": {
                    "description": "ChannelName refers to the channel name",
                    "type": "string",
                    "default": ""
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "password": {
                    "description": "Password to use to connect to broker",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tls": {
                    "description": "TLS configuration for the emitter client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "username": {
                    "description": "Username to use to connect to broker",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EmitterEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventPersistence": {
            "type": "object",
            "properties": {
                "catchup": {
                    "description": "Catchup enables to triggered the missed schedule when eventsource restarts",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.CatchupConfiguration"
                },
                "configMap": {
                    "description": "ConfigMap holds configmap details for persistence",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.ConfigMapPersistence"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventPersistence",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSource": {
            "description": "EventSource is the definition of a eventsource resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceFilter": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceList": {
            "description": "EventSourceList is the list of eventsource resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSource"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceSpec": {
            "description": "EventSourceSpec refers to specification of event-source resource",
            "type": "object",
            "properties": {
                "amqp": {
                    "description": "AMQP event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AMQPEventSource"
                    }
                },
                "azureEventsHub": {
                    "description": "AzureEventsHub event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource"
                    }
                },
                "bitbucket": {
                    "description": "Bitbucket event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketEventSource"
                    }
                },
                "bitbucketserver": {
                    "description": "Bitbucket Server event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource"
                    }
                },
                "calendar": {
                    "description": "Calendar event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.CalendarEventSource"
                    }
                },
                "emitter": {
                    "description": "Emitter event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EmitterEventSource"
                    }
                },
                "eventBusName": {
                    "description": "EventBusName references to a EventBus name. By default the value is \"default\"",
                    "type": "string"
                },
                "file": {
                    "description": "File event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.FileEventSource"
                    }
                },
                "generic": {
                    "description": "Generic event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GenericEventSource"
                    }
                },
                "github": {
                    "description": "Github event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GithubEventSource"
                    }
                },
                "gitlab": {
                    "description": "Gitlab event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GitlabEventSource"
                    }
                },
                "hdfs": {
                    "description": "HDFS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.HDFSEventSource"
                    }
                },
                "kafka": {
                    "description": "Kafka event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.KafkaEventSource"
                    }
                },
                "minio": {
                    "description": "Minio event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.S3Artifact"
                    }
                },
                "mqtt": {
                    "description": "MQTT event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.MQTTEventSource"
                    }
                },
                "nats": {
                    "description": "NATS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.NATSEventsSource"
                    }
                },
                "nsq": {
                    "description": "NSQ event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.NSQEventSource"
                    }
                },
                "pubSub": {
                    "description": "PubSub event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.PubSubEventSource"
                    }
                },
                "pulsar": {
                    "description": "Pulsar event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.PulsarEventSource"
                    }
                },
                "redis": {
                    "description": "Redis event source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.RedisEventSource"
                    }
                },
                "redisStream": {
                    "description": "Redis stream source",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.RedisStreamEventSource"
                    }
                },
                "replicas": {
                    "description": "Replicas is the event source deployment replicas",
                    "type": "integer",
                    "format": "int32"
                },
                "resource": {
                    "description": "Resource event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.ResourceEventSource"
                    }
                },
                "service": {
                    "description": "Service is the specifications of the service to expose the event source",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Service"
                },
                "slack": {
                    "description": "Slack event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SlackEventSource"
                    }
                },
                "sns": {
                    "description": "SNS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SNSEventSource"
                    }
                },
                "sqs": {
                    "description": "SQS event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.SQSEventSource"
                    }
                },
                "storageGrid": {
                    "description": "StorageGrid event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.StorageGridEventSource"
                    }
                },
                "stripe": {
                    "description": "Stripe event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.StripeEventSource"
                    }
                },
                "template": {
                    "description": "Template is the pod specification for the event source",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Template"
                },
                "webhook": {
                    "description": "Webhook event sources",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookEventSource"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.EventSourceStatus": {
            "description": "EventSourceStatus holds the status of the event-source resource",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions are the latest available observations of a resource's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Condition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventSourceStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.FileEventSource": {
            "description": "FileEventSource describes an event-source for file related events.",
            "type": "object",
            "required": [
                "eventType",
                "watchPathConfig"
            ],
            "properties": {
                "eventType": {
                    "description": "Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "polling": {
                    "description": "Use polling instead of inotify",
                    "type": "boolean"
                },
                "watchPathConfig": {
                    "description": "WatchPathConfig contains configuration about the file path to watch",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WatchPathConfig"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "FileEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GenericEventSource": {
            "description": "GenericEventSource refers to a generic event source. It can be used to implement a custom event source.",
            "type": "object",
            "required": [
                "url",
                "config"
            ],
            "properties": {
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "config": {
                    "description": "Config is the event source configuration",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "insecure": {
                    "description": "Insecure determines the type of connection.",
                    "type": "boolean"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "url": {
                    "description": "URL of the gRPC server that implements the event source.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GenericEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GithubAppCreds": {
            "type": "object",
            "required": [
                "privateKey",
                "appID",
                "installationID"
            ],
            "properties": {
                "appID": {
                    "description": "AppID refers to the GitHub App ID for the application you created",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "installationID": {
                    "description": "InstallationID refers to the Installation ID of the GitHub app you created and installed",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "privateKey": {
                    "description": "PrivateKey refers to a K8s secret containing the GitHub app private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GithubAppCreds",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GithubEventSource": {
            "description": "GithubEventSource refers to event-source for github related events",
            "type": "object",
            "required": [
                "events"
            ],
            "properties": {
                "active": {
                    "description": "Active refers to status of the webhook for event deliveries. https://developer.github.com/webhooks/creating/#active",
                    "type": "boolean"
                },
                "apiToken": {
                    "description": "APIToken refers to a K8s secret containing github api token",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "contentType": {
                    "description": "ContentType of the event delivery",
                    "type": "string"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the GitHub hook for the repository once the event source is stopped.",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events refer to Github events to which the event source will subscribe",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "githubApp": {
                    "description": "GitHubApp holds the GitHub app credentials",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.GithubAppCreds"
                },
                "githubBaseURL": {
                    "description": "GitHub base URL (for GitHub Enterprise)",
                    "type": "string"
                },
                "githubUploadURL": {
                    "description": "GitHub upload URL (for GitHub Enterprise)",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the webhook's id Deprecated: This is not used at all, will be removed in v1.6",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "insecure": {
                    "description": "Insecure tls verification",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "organizations": {
                    "description": "Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "DeprecatedOwner refers to GitHub owner name i.e. argoproj Deprecated: use Repositories instead. Will be unsupported in v 1.6",
                    "type": "string",
                    "default": ""
                },
                "repositories": {
                    "description": "Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.OwnedRepositories"
                    }
                },
                "repository": {
                    "description": "DeprecatedRepository refers to GitHub repo name i.e. argo-events Deprecated: use Repositories instead. Will be unsupported in v 1.6",
                    "type": "string",
                    "default": ""
                },
                "webhook": {
                    "description": "Webhook refers to the configuration required to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                },
                "webhookSecret": {
                    "description": "WebhookSecret refers to K8s secret containing GitHub webhook secret https://developer.github.com/webhooks/securing/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GithubEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.GitlabEventSource": {
            "description": "GitlabEventSource refers to event-source related to Gitlab events",
            "type": "object",
            "required": [
                "events",
                "gitlabBaseURL"
            ],
            "properties": {
                "accessToken": {
                    "description": "AccessToken references to k8 secret which holds the gitlab api access information",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "deleteHookOnFinish": {
                    "description": "DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.",
                    "type": "boolean"
                },
                "enableSSLVerification": {
                    "description": "EnableSSLVerification to enable ssl verification",
                    "type": "boolean"
                },
                "events": {
                    "description": "Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "gitlabBaseURL": {
                    "description": "GitlabBaseURL is the base URL for API requests to a custom endpoint",
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projectID": {
                    "description": "DeprecatedProjectID is the id of project for which integration needs to setup Deprecated: use Projects instead. Will be unsupported in v 1.7",
                    "type": "string"
                },
                "projects": {
                    "description": "List of project IDs or project namespace paths like \"whynowy/test\"",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "secretToken": {
                    "description": "SecretToken references to k8 secret which holds the Secret Token used by webhook config",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "webhook": {
                    "description": "Webhook holds configuration to run a http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitlabEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.HDFSEventSource": {
            "description": "HDFSEventSource refers to event-source for HDFS related events",
            "type": "object",
            "required": [
                "directory",
                "type",
                "addresses"
            ],
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "checkInterval": {
                    "description": "CheckInterval is a string that describes an interval duration to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)",
                    "type": "string"
                },
                "directory": {
                    "description": "Directory to watch for events",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "path": {
                    "description": "Path is relative path of object to watch with respect to the directory",
                    "type": "string"
                },
                "pathRegexp": {
                    "description": "PathRegexp is regexp of relative path of object to watch with respect to the directory",
                    "type": "string"
                },
                "type": {
                    "description": "Type of file operations to watch",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup": {
            "type": "object",
            "required": [
                "groupName"
            ],
            "properties": {
                "groupName": {
                    "description": "The name for the consumer group to use",
                    "type": "string",
                    "default": ""
                },
                "oldest": {
                    "description": "When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false",
                    "type": "boolean"
                },
                "rebalanceStrategy": {
                    "description": "Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaConsumerGroup",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.KafkaEventSource": {
            "description": "KafkaEventSource refers to event-source for Kafka related events",
            "type": "object",
            "required": [
                "url",
                "partition",
                "topic"
            ],
            "properties": {
                "config": {
                    "description": "Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/Shopify/sarama/blob/main/config.go e.g.\n\nconsumer:\n  fetch:\n    min: 1\nnet:\n  MaxOpenRequests: 5",
                    "type": "string"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "consumerGroup": {
                    "description": "Consumer group for kafka client",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "limitEventsPerSecond": {
                    "description": "Sets a limit on how many events get read from kafka per second.",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "partition": {
                    "description": "Partition name",
                    "type": "string",
                    "default": ""
                },
                "sasl": {
                    "description": "SASL configuration for the kafka client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SASLConfig"
                },
                "tls": {
                    "description": "TLS configuration for the kafka client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic name",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "URL to kafka cluster, multiple URLs separated by comma",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.MQTTEventSource": {
            "description": "MQTTEventSource refers to event-source for MQTT related events",
            "type": "object",
            "required": [
                "url",
                "topic",
                "clientId"
            ],
            "properties": {
                "clientId": {
                    "description": "ClientID is the id of the client",
                    "type": "string",
                    "default": ""
                },
                "connectionBackoff": {
                    "description": "ConnectionBackoff holds backoff applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the mqtt client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic name",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "URL to connect to broker",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MQTTEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.NATSAuth": {
            "description": "NATSAuth refers to the auth info for NATS EventSource",
            "type": "object",
            "properties": {
                "basic": {
                    "description": "Baisc auth with username and password",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "credential": {
                    "description": "credential used to connect",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "nkey": {
                    "description": "NKey used to connect",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "token": {
                    "description": "Token used to connect",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.NATSEventsSource": {
            "description": "NATSEventsSource refers to event-source for NATS related events",
            "type": "object",
            "required": [
                "url",
                "subject"
            ],
            "properties": {
                "auth": {
                    "description": "Auth information",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.NATSAuth"
                },
                "connectionBackoff": {
                    "description": "ConnectionBackoff holds backoff applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "subject": {
                    "description": "Subject holds the name of the subject onto which messages are published",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the nats client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL to connect to NATS cluster",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSEventsSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.NSQEventSource": {
            "description": "NSQEventSource describes the event source for NSQ PubSub More info at https://godoc.org/github.com/nsqio/go-nsq",
            "type": "object",
            "required": [
                "hostAddress",
                "topic",
                "channel"
            ],
            "properties": {
                "channel": {
                    "description": "Channel used for subscription",
                    "type": "string",
                    "default": ""
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hostAddress": {
                    "description": "HostAddress is the address of the host for NSQ lookup",
                    "type": "string",
                    "default": ""
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the nsq client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Topic to subscribe to.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NSQEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.OwnedRepositories": {
            "type": "object",
            "properties": {
                "names": {
                    "description": "Repository names",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "owner": {
                    "description": "Organization or user name",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OwnedRepositories",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.PubSubEventSource": {
            "description": "PubSubEventSource refers to event-source for GCP PubSub related events.",
            "type": "object",
            "properties": {
                "credentialSecret": {
                    "description": "CredentialSecret references to the secret that contains JSON credentials to access GCP. If it is missing, it implicitly uses Workload Identity to access. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "deleteSubscriptionOnFinish": {
                    "description": "DeleteSubscriptionOnFinish determines whether to delete the GCP PubSub subscription once the event source is stopped.",
                    "type": "boolean"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "projectID": {
                    "description": "ProjectID is GCP project ID for the subscription. Required if you run Argo Events outside of GKE/GCE. (otherwise, the default value is its project)",
                    "type": "string",
                    "default": ""
                },
                "subscriptionID": {
                    "description": "SubscriptionID is ID of subscription. Required if you use existing subscription. The default value will be auto generated hash based on this eventsource setting, so the subscription might be recreated every time you update the setting, which has a possibility of event loss.",
                    "type": "string",
                    "default": ""
                },
                "topic": {
                    "description": "Topic to which the subscription should belongs. Required if you want the eventsource to create a new subscription. If you specify this field along with an existing subscription, it will be verified whether it actually belongs to the specified topic.",
                    "type": "string",
                    "default": ""
                },
                "topicProjectID": {
                    "description": "TopicProjectID is GCP project ID for the topic. By default, it is same as ProjectID.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PubSubEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.PulsarEventSource": {
            "description": "PulsarEventSource describes the event source for Apache Pulsar",
            "type": "object",
            "required": [
                "topics",
                "url"
            ],
            "properties": {
                "authTokenSecret": {
                    "description": "Authentication token for the pulsar client.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the pulsar client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "tlsAllowInsecureConnection": {
                    "description": "Whether the Pulsar client accept untrusted TLS certificate from broker.",
                    "type": "boolean"
                },
                "tlsTrustCertsSecret": {
                    "description": "Trusted TLS certificate secret.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tlsValidateHostname": {
                    "description": "Whether the Pulsar client verify the validity of the host name from broker.",
                    "type": "boolean"
                },
                "topics": {
                    "description": "Name of the topics to subscribe to.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "type": {
                    "description": "Type of the subscription. Only \"exclusive\" and \"shared\" is supported. Defaults to exclusive.",
                    "type": "string"
                },
                "url": {
                    "description": "Configure the service URL for the Pulsar service.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PulsarEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.RedisEventSource": {
            "description": "RedisEventSource describes an event source for the Redis PubSub. More info at https://godoc.org/github.com/go-redis/redis#example-PubSub",
            "type": "object",
            "required": [
                "hostAddress",
                "channels"
            ],
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "db": {
                    "description": "DB to use. If not specified, default DB 0 will be used.",
                    "type": "integer",
                    "format": "int32"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hostAddress": {
                    "description": "HostAddress refers to the address of the Redis host/server",
                    "type": "string",
                    "default": ""
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "namespace": {
                    "description": "Namespace to use to retrieve the password from. It should only be specified if password is declared",
                    "type": "string"
                },
                "password": {
                    "description": "Password required for authentication if any.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tls": {
                    "description": "TLS configuration for the redis client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "username": {
                    "description": "Username required for ACL style authentication if any.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RedisEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.RedisStreamEventSource": {
            "description": "RedisStreamEventSource describes an event source for Redis streams (https://redis.io/topics/streams-intro)",
            "type": "object",
            "required": [
                "hostAddress",
                "streams"
            ],
            "properties": {
                "consumerGroup": {
                    "description": "ConsumerGroup refers to the Redis stream consumer group that will be created on all redis streams. Messages are read through this group. Defaults to 'argo-events-cg'",
                    "type": "string"
                },
                "db": {
                    "description": "DB to use. If not specified, default DB 0 will be used.",
                    "type": "integer",
                    "format": "int32"
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "hostAddress": {
                    "description": "HostAddress refers to the address of the Redis host/server (master instance)",
                    "type": "string",
                    "default": ""
                },
                "maxMsgCountPerRead": {
                    "description": "MaxMsgCountPerRead holds the maximum number of messages per stream that will be read in each XREADGROUP of all streams Example: if there are 2 streams and MaxMsgCountPerRead=10, then each XREADGROUP may read upto a total of 20 messages. Same as COUNT option in XREADGROUP(https://redis.io/topics/streams-intro). Defaults to 10",
                    "type": "integer",
                    "format": "int32"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "password": {
                    "description": "Password required for authentication if any.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "streams": {
                    "description": "Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tls": {
                    "description": "TLS configuration for the redis client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "username": {
                    "description": "Username required for ACL style authentication if any.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RedisStreamEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.ResourceEventSource": {
            "description": "ResourceEventSource refers to a event-source for K8s resource related events.",
            "type": "object",
            "required": [
                "namespace",
                "group",
                "version",
                "resource",
                "eventTypes"
            ],
            "properties": {
                "eventTypes": {
                    "description": "EventTypes is the list of event type to watch. Possible values are - ADD, UPDATE and DELETE.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter is applied on the metadata of the resource If you apply filter, then the internal event informer will only monitor objects that pass the filter.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.ResourceFilter"
                },
                "group": {
                    "type": "string",
                    "default": ""
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "namespace": {
                    "description": "Namespace where resource is deployed",
                    "type": "string",
                    "default": ""
                },
                "resource": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.ResourceFilter": {
            "description": "ResourceFilter contains K8s ObjectMeta information to further filter resource event objects",
            "type": "object",
            "properties": {
                "afterStart": {
                    "description": "If the resource is created after the start time then the event is treated as valid.",
                    "type": "boolean"
                },
                "createdBy": {
                    "description": "If resource is created before the specified time then the event is treated as valid.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "fields": {
                    "description": "Fields provide field filters similar to K8s field selector (see https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/). Unlike K8s field selector, it supports arbitrary fileds like \"spec.serviceAccountName\", and the value could be a string or a regex. Same as K8s field selector, operator \"=\", \"==\" and \"!=\" are supported.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Selector"
                    }
                },
                "labels": {
                    "description": "Labels provide listing options to K8s API to watch resource/s. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/label-selectors/ for more info.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.Selector"
                    }
                },
                "prefix": {
                    "description": "Prefix filter is applied on the resource name.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SNSEventSource": {
            "description": "SNSEventSource refers to event-source for AWS SNS related events",
            "type": "object",
            "required": [
                "topicArn",
                "region"
            ],
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8s secret containing aws access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpoint": {
                    "description": "Endpoint configures connection to a specific SNS endpoint instead of Amazons servers",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "region": {
                    "description": "Region is AWS region",
                    "type": "string",
                    "default": ""
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "SecretKey refers K8s secret containing aws secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "topicArn": {
                    "description": "TopicArn",
                    "type": "string",
                    "default": ""
                },
                "validateSignature": {
                    "description": "ValidateSignature is boolean that can be set to true for SNS signature verification",
                    "type": "boolean"
                },
                "webhook": {
                    "description": "Webhook configuration for http server",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SNSEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SQSEventSource": {
            "description": "SQSEventSource refers to event-source for AWS SQS related events",
            "type": "object",
            "required": [
                "region",
                "queue",
                "waitTimeSeconds"
            ],
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8s secret containing aws access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "dlq": {
                    "description": "DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully. If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue. The default value is false.",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint configures connection to a specific SQS endpoint instead of Amazons servers",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "jsonBody": {
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "queue": {
                    "description": "Queue is AWS SQS queue to listen to for messages",
                    "type": "string",
                    "default": ""
                },
                "queueAccountId": {
                    "description": "QueueAccountID is the ID of the account that created the queue to monitor",
                    "type": "string"
                },
                "region": {
                    "description": "Region is AWS region",
                    "type": "string",
                    "default": ""
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "SecretKey refers K8s secret containing aws secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "sessionToken": {
                    "description": "SessionToken refers to K8s secret containing AWS temporary credentials(STS) session token",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "waitTimeSeconds": {
                    "description": "WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SQSEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.Selector": {
            "description": "Selector represents conditional operation to select K8s objects.",
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "description": "Key name",
                    "type": "string",
                    "default": ""
                },
                "operation": {
                    "description": "Supported operations like ==, !=, \u003c=, \u003e= etc. Defaults to ==. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors for more info.",
                    "type": "string"
                },
                "value": {
                    "description": "Value",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Selector",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.Service": {
            "description": "Service holds the service information eventsource exposes",
            "type": "object",
            "properties": {
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                    "type": "string"
                },
                "ports": {
                    "description": "The list of ports that are exposed by this ClusterIP service.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "port",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "port",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Service",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.SlackEventSource": {
            "description": "SlackEventSource refers to event-source for Slack related events",
            "type": "object",
            "properties": {
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "signingSecret": {
                    "description": "Slack App signing secret",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "token": {
                    "description": "Token for URL verification handshake",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SlackEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.StorageGridEventSource": {
            "description": "StorageGridEventSource refers to event-source for StorageGrid related events",
            "type": "object",
            "required": [
                "topicArn",
                "bucket",
                "authToken",
                "apiURL"
            ],
            "properties": {
                "apiURL": {
                    "description": "APIURL is the url of the storagegrid api.",
                    "type": "string",
                    "default": ""
                },
                "authToken": {
                    "description": "Auth token for storagegrid api",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Name of the bucket to register notifications for.",
                    "type": "string",
                    "default": ""
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "filter": {
                    "description": "Filter on object key which caused the notification.",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.StorageGridFilter"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "region": {
                    "description": "S3 region. Defaults to us-east-1",
                    "type": "string"
                },
                "topicArn": {
                    "description": "TopicArn",
                    "type": "string",
                    "default": ""
                },
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StorageGridEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.StorageGridFilter": {
            "description": "StorageGridFilter represents filters to apply to bucket notifications for specifying constraints on objects",
            "type": "object",
            "required": [
                "prefix",
                "suffix"
            ],
            "properties": {
                "prefix": {
                    "type": "string",
                    "default": ""
                },
                "suffix": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StorageGridFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.StripeEventSource": {
            "description": "StripeEventSource describes the event source for stripe webhook notifications More info at https://stripe.com/docs/webhooks",
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "APIKey refers to K8s secret that holds Stripe API key. Used only if CreateWebhook is enabled.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "createWebhook": {
                    "description": "CreateWebhook if specified creates a new webhook programmatically.",
                    "type": "boolean"
                },
                "eventFilter": {
                    "description": "EventFilter describes the type of events to listen to. If not specified, all types of events will be processed. More info at https://stripe.com/docs/api/events/list",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.WebhookContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StripeEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.Template": {
            "description": "Template holds the information of an EventSource deployment template",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "container": {
                    "description": "Container is the main container image to run in the event source pod",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run event source pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in an eventsource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Template",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.WatchPathConfig": {
            "type": "object",
            "required": [
                "directory"
            ],
            "properties": {
                "directory": {
                    "description": "Directory to watch for events",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "Path is relative path of object to watch with respect to the directory",
                    "type": "string"
                },
                "pathRegexp": {
                    "description": "PathRegexp is regexp of relative path of object to watch with respect to the directory",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WatchPathConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.WebhookContext": {
            "description": "WebhookContext holds a general purpose REST API context",
            "type": "object",
            "required": [
                "endpoint",
                "method",
                "port",
                "url"
            ],
            "properties": {
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpoint": {
                    "description": "REST API endpoint",
                    "type": "string",
                    "default": ""
                },
                "maxPayloadSize": {
                    "description": "MaxPayloadSize is the maximum webhook payload size that the server will accept. Requests exceeding that limit will be rejected with \"request too large\" response. Default value: 1048576 (1MB).",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "method": {
                    "description": "Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content",
                    "type": "string",
                    "default": ""
                },
                "port": {
                    "description": "Port on which HTTP server is listening for incoming events.",
                    "type": "string",
                    "default": ""
                },
                "serverCertSecret": {
                    "description": "ServerCertPath refers the file that contains the cert.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "serverKeySecret": {
                    "description": "ServerKeyPath refers the file that contains private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "url": {
                    "description": "URL is the url of the server.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WebhookContext",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.eventsource.v1alpha1.WebhookEventSource": {
            "description": "CalendarEventSource describes an HTTP based EventSource",
            "type": "object",
            "required": [
                "endpoint",
                "method",
                "port",
                "url"
            ],
            "properties": {
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpoint": {
                    "description": "REST API endpoint",
                    "type": "string",
                    "default": ""
                },
                "filter": {
                    "description": "Filter",
                    "$ref": "#/definitions/io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                },
                "maxPayloadSize": {
                    "description": "MaxPayloadSize is the maximum webhook payload size that the server will accept. Requests exceeding that limit will be rejected with \"request too large\" response. Default value: 1048576 (1MB).",
                    "type": "integer",
                    "format": "int64"
                },
                "metadata": {
                    "description": "Metadata holds the user defined metadata which will passed along the event payload.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "method": {
                    "description": "Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content",
                    "type": "string",
                    "default": ""
                },
                "port": {
                    "description": "Port on which HTTP server is listening for incoming events.",
                    "type": "string",
                    "default": ""
                },
                "serverCertSecret": {
                    "description": "ServerCertPath refers the file that contains the cert.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "serverKeySecret": {
                    "description": "ServerKeyPath refers the file that contains private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "url": {
                    "description": "URL is the url of the server.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WebhookEventSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.AWSLambdaTrigger": {
            "description": "AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function",
            "type": "object",
            "required": [
                "functionName",
                "region",
                "payload"
            ],
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8s secret containing aws access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "functionName": {
                    "description": "FunctionName refers to the name of the function to invoke.",
                    "type": "string",
                    "default": ""
                },
                "invocationType": {
                    "description": "Choose from the following options.\n\n   * RequestResponse (default) - Invoke the function synchronously. Keep\n   the connection open until the function returns a response or times out.\n   The API response includes the function response and additional data.\n\n   * Event - Invoke the function asynchronously. Send events that fail multiple\n   times to the function's dead-letter queue (if it's configured). The API\n   response only includes a status code.\n\n   * DryRun - Validate parameter values and verify that the user or role\n   has permission to invoke the function.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "region": {
                    "description": "Region is AWS region",
                    "type": "string",
                    "default": ""
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "SecretKey refers K8s secret containing aws secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AWSLambdaTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger": {
            "description": "ArgoWorkflowTrigger is the trigger for the Argo Workflow",
            "type": "object",
            "properties": {
                "args": {
                    "description": "Args is the list of arguments to pass to the argo CLI",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "operation": {
                    "description": "Operation refers to the type of operation performed on the argo workflow resource. Default value is Submit.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters to pass to resolved Argo Workflow object",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "source": {
                    "description": "Source of the K8s resource file(s)",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArgoWorkflowTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ArtifactLocation": {
            "description": "ArtifactLocation describes the source location for an external artifact",
            "type": "object",
            "properties": {
                "configmap": {
                    "description": "Configmap that stores the artifact",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "file": {
                    "description": "File artifact is artifact stored in a file",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.FileArtifact"
                },
                "git": {
                    "description": "Git repository hosting the artifact",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitArtifact"
                },
                "inline": {
                    "description": "Inline artifact is embedded in sensor spec as a string",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource is generic template for K8s resource",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Resource"
                },
                "s3": {
                    "description": "S3 compliant artifact",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.S3Artifact"
                },
                "url": {
                    "description": "URL to fetch the artifact from",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.URLArtifact"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactLocation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger": {
            "description": "AzureEventHubsTrigger refers to specification of the Azure Event Hubs Trigger",
            "type": "object",
            "required": [
                "fqdn",
                "hubName",
                "sharedAccessKeyName",
                "payload"
            ],
            "properties": {
                "fqdn": {
                    "description": "FQDN refers to the namespace dns of Azure Event Hubs to be used i.e. \u003cnamespace\u003e.servicebus.windows.net",
                    "type": "string",
                    "default": ""
                },
                "hubName": {
                    "description": "HubName refers to the Azure Event Hub to send events to",
                    "type": "string",
                    "default": ""
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "sharedAccessKey": {
                    "description": "SharedAccessKey refers to a K8s secret containing the primary key for the",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "sharedAccessKeyName": {
                    "description": "SharedAccessKeyName refers to the name of the Shared Access Key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureEventHubsTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ConditionsResetByTime": {
            "type": "object",
            "properties": {
                "cron": {
                    "description": "Cron is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConditionsResetByTime",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ConditionsResetCriteria": {
            "type": "object",
            "properties": {
                "byTime": {
                    "description": "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ConditionsResetByTime"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ConditionsResetCriteria",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.CustomTrigger": {
            "description": "CustomTrigger refers to the specification of the custom trigger.",
            "type": "object",
            "required": [
                "serverURL",
                "secure",
                "spec",
                "payload"
            ],
            "properties": {
                "certSecret": {
                    "description": "CertSecret refers to the secret that contains cert for secure connection between sensor and custom trigger gRPC server.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved custom trigger trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "secure": {
                    "description": "Secure refers to type of the connection between sensor to custom trigger gRPC",
                    "type": "boolean",
                    "default": false
                },
                "serverNameOverride": {
                    "description": "ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.",
                    "type": "string"
                },
                "serverURL": {
                    "description": "ServerURL is the url of the gRPC server that executes custom trigger",
                    "type": "string",
                    "default": ""
                },
                "spec": {
                    "description": "Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CustomTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.DataFilter": {
            "description": "DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html",
            "type": "object",
            "required": [
                "path",
                "type",
                "value"
            ],
            "properties": {
                "comparator": {
                    "description": "Comparator compares the event data with a user given value. Can be \"\u003e=\", \"\u003e\", \"=\", \"!=\", \"\u003c\", or \"\u003c=\". Is optional, and if left blank treated as equality \"=\".",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string",
                    "default": ""
                },
                "template": {
                    "description": "Template is a go-template for extracting a string from the event's data. A Template is evaluated with provided path, type and value. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
                    "type": "string"
                },
                "type": {
                    "description": "Type contains the JSON type of the data",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the allowed string values for this key Booleans are passed using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DataFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Event": {
            "description": "Event represents the cloudevent received from an event source.",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "context": {
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventContext"
                },
                "data": {
                    "type": "string",
                    "format": "byte"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Event",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventContext": {
            "description": "EventContext holds the context of the cloudevent received from an event source.",
            "type": "object",
            "required": [
                "id",
                "source",
                "specversion",
                "type",
                "datacontenttype",
                "subject",
                "time"
            ],
            "properties": {
                "datacontenttype": {
                    "description": "DataContentType - A MIME (RFC2046) string describing the media type of `data`.",
                    "type": "string",
                    "default": ""
                },
                "id": {
                    "description": "ID of the event; must be non-empty and unique within the scope of the producer.",
                    "type": "string",
                    "default": ""
                },
                "source": {
                    "description": "Source - A URI describing the event producer.",
                    "type": "string",
                    "default": ""
                },
                "specversion": {
                    "description": "SpecVersion - The version of the CloudEvents specification used by the event.",
                    "type": "string",
                    "default": ""
                },
                "subject": {
                    "description": "Subject - The subject of the event in the context of the event producer",
                    "type": "string",
                    "default": ""
                },
                "time": {
                    "description": "Time - A Timestamp when the event happened.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "type": {
                    "description": "Type - The type of the occurrence which has happened.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventContext",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventDependency": {
            "description": "EventDependency describes a dependency",
            "type": "object",
            "required": [
                "name",
                "eventSourceName",
                "eventName"
            ],
            "properties": {
                "eventName": {
                    "description": "EventName is the name of the event",
                    "type": "string",
                    "default": ""
                },
                "eventSourceName": {
                    "description": "EventSourceName is the name of EventSource that Sensor depends on",
                    "type": "string",
                    "default": ""
                },
                "filters": {
                    "description": "Filters and rules governing toleration of success and constraints on the context and data of an event",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependencyFilter"
                },
                "filtersLogicalOperator": {
                    "description": "FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (\u0026\u0026), or (||) Is optional and if left blank treated as and (\u0026\u0026).",
                    "type": "string"
                },
                "name": {
                    "description": "Name is a unique name of this dependency",
                    "type": "string",
                    "default": ""
                },
                "transform": {
                    "description": "Transform transforms the event data",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependencyTransformer"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventDependency",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventDependencyFilter": {
            "description": "EventDependencyFilter defines filters and constraints for a event.",
            "type": "object",
            "properties": {
                "context": {
                    "description": "Context filter constraints",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventContext"
                },
                "data": {
                    "description": "Data filter constraints with escalation",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.DataFilter"
                    }
                },
                "dataLogicalOperator": {
                    "description": "DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (\u0026\u0026), or (||) Is optional and if left blank treated as and (\u0026\u0026).",
                    "type": "string"
                },
                "exprLogicalOperator": {
                    "description": "ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (\u0026\u0026), or (||) Is optional and if left blank treated as and (\u0026\u0026).",
                    "type": "string"
                },
                "exprs": {
                    "description": "Exprs contains the list of expressions evaluated against the event payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ExprFilter"
                    }
                },
                "script": {
                    "description": "Script refers to a Lua script evaluated to determine the validity of an event.",
                    "type": "string"
                },
                "time": {
                    "description": "Time filter on the event with escalation",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TimeFilter"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventDependencyFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.EventDependencyTransformer": {
            "description": "EventDependencyTransformer transforms the event",
            "type": "object",
            "properties": {
                "jq": {
                    "description": "JQ holds the jq command applied for transformation",
                    "type": "string"
                },
                "script": {
                    "description": "Script refers to a Lua script used to transform the event",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "EventDependencyTransformer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.ExprFilter": {
            "type": "object",
            "required": [
                "expr",
                "fields"
            ],
            "properties": {
                "expr": {
                    "description": "Expr refers to the expression that determines the outcome of the filter.",
                    "type": "string",
                    "default": ""
                },
                "fields": {
                    "description": "Fields refers to set of keys that refer to the paths within event payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.PayloadField"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExprFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.FileArtifact": {
            "description": "FileArtifact contains information about an artifact in a filesystem",
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "FileArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.GitArtifact": {
            "description": "GitArtifact contains information about an artifact stored in git",
            "type": "object",
            "required": [
                "url",
                "cloneDirectory",
                "filePath"
            ],
            "properties": {
                "branch": {
                    "description": "Branch to use to pull trigger resource",
                    "type": "string"
                },
                "cloneDirectory": {
                    "description": "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.",
                    "type": "string",
                    "default": ""
                },
                "creds": {
                    "description": "Creds contain reference to git username and password",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitCreds"
                },
                "filePath": {
                    "description": "Path to file that contains trigger resource definition",
                    "type": "string",
                    "default": ""
                },
                "insecureIgnoreHostKey": {
                    "description": "Whether to ignore host key",
                    "type": "boolean"
                },
                "ref": {
                    "description": "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.",
                    "type": "string"
                },
                "remote": {
                    "description": "Remote to manage set of tracked repositories. Defaults to \"origin\". Refer https://git-scm.com/docs/git-remote",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.GitRemoteConfig"
                },
                "sshKeySecret": {
                    "description": "SSHKeySecret refers to the secret that contains SSH key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tag": {
                    "description": "Tag to use to pull trigger resource",
                    "type": "string"
                },
                "url": {
                    "description": "Git URL",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.GitCreds": {
            "description": "GitCreds contain reference to git username and password",
            "type": "object",
            "properties": {
                "password": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "username": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitCreds",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.GitRemoteConfig": {
            "description": "GitRemoteConfig contains the configuration of a Git remote",
            "type": "object",
            "required": [
                "name",
                "urls"
            ],
            "properties": {
                "name": {
                    "description": "Name of the remote to fetch from.",
                    "type": "string",
                    "default": ""
                },
                "urls": {
                    "description": "URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitRemoteConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.HTTPTrigger": {
            "description": "HTTPTrigger is the trigger for the HTTP request",
            "type": "object",
            "required": [
                "url",
                "payload"
            ],
            "properties": {
                "basicAuth": {
                    "description": "BasicAuth configuration for the http request.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.BasicAuth"
                },
                "headers": {
                    "description": "Headers for the HTTP request.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "method": {
                    "description": "Method refers to the type of the HTTP request. Refer https://golang.org/src/net/http/method.go for more info. Default value is POST.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the HTTP trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "secureHeaders": {
                    "description": "Secure Headers stored in Kubernetes Secrets for the HTTP requests.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SecureHeader"
                    }
                },
                "timeout": {
                    "description": "Timeout refers to the HTTP request timeout in seconds. Default value is 60 seconds.",
                    "type": "integer",
                    "format": "int64"
                },
                "tls": {
                    "description": "TLS configuration for the HTTP client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL refers to the URL to send HTTP request to.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.K8SResourcePolicy": {
            "description": "K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels",
            "type": "object",
            "required": [
                "backoff",
                "errorOnBackoffTimeout"
            ],
            "properties": {
                "backoff": {
                    "description": "Backoff before checking resource state",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "errorOnBackoffTimeout": {
                    "description": "ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource",
                    "type": "boolean",
                    "default": false
                },
                "labels": {
                    "description": "Labels required to identify whether a resource is in success state",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "K8SResourcePolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.KafkaTrigger": {
            "description": "KafkaTrigger refers to the specification of the Kafka trigger.",
            "type": "object",
            "required": [
                "url",
                "topic",
                "partition",
                "payload"
            ],
            "properties": {
                "compress": {
                    "description": "Compress determines whether to compress message or not. Defaults to false. If set to true, compresses message using snappy compression.",
                    "type": "boolean"
                },
                "flushFrequency": {
                    "description": "FlushFrequency refers to the frequency in milliseconds to flush batches. Defaults to 500 milliseconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "partition": {
                    "description": "Partition to write data to.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "partitioningKey": {
                    "description": "The partitioning key for the messages put on the Kafka topic. Defaults to broker url.",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "requiredAcks": {
                    "description": "RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack).",
                    "type": "integer",
                    "format": "int32"
                },
                "sasl": {
                    "description": "SASL configuration for the kafka client",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.SASLConfig"
                },
                "tls": {
                    "description": "TLS configuration for the Kafka producer.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "topic": {
                    "description": "Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "URL of the Kafka broker, multiple URLs separated by comma.",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "KafkaTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.LogTrigger": {
            "type": "object",
            "properties": {
                "intervalSeconds": {
                    "description": "Only print messages every interval. Useful to prevent logging too much data for busy events.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LogTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.NATSTrigger": {
            "description": "NATSTrigger refers to the specification of the NATS trigger.",
            "type": "object",
            "required": [
                "url",
                "subject",
                "payload"
            ],
            "properties": {
                "parameters": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "subject": {
                    "description": "Name of the subject to put message on.",
                    "type": "string",
                    "default": ""
                },
                "tls": {
                    "description": "TLS configuration for the NATS producer.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "url": {
                    "description": "URL of the NATS cluster.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NATSTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.OpenWhiskTrigger": {
            "description": "OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.",
            "type": "object",
            "required": [
                "host",
                "actionName",
                "payload"
            ],
            "properties": {
                "actionName": {
                    "description": "Name of the action/function.",
                    "type": "string",
                    "default": ""
                },
                "authToken": {
                    "description": "AuthToken for authentication.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "host": {
                    "description": "Host URL of the OpenWhisk.",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "Namespace for the action. Defaults to \"_\".",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "version": {
                    "description": "Version for the API. Defaults to v1.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OpenWhiskTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.PayloadField": {
            "description": "PayloadField binds a value at path within the event payload against a name.",
            "type": "object",
            "required": [
                "path",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name acts as key that holds the value at the path.",
                    "type": "string",
                    "default": ""
                },
                "path": {
                    "description": "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PayloadField",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.PulsarTrigger": {
            "description": "PulsarTrigger refers to the specification of the Pulsar trigger.",
            "type": "object",
            "required": [
                "url",
                "topic",
                "payload"
            ],
            "properties": {
                "authTokenSecret": {
                    "description": "Authentication token for the pulsar client.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "payload": {
                    "description": "Payload is the list of key-value extracted from an event payload to construct the request payload.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "tls": {
                    "description": "TLS configuration for the pulsar client.",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.TLSConfig"
                },
                "tlsAllowInsecureConnection": {
                    "description": "Whether the Pulsar client accept untrusted TLS certificate from broker.",
                    "type": "boolean"
                },
                "tlsTrustCertsSecret": {
                    "description": "Trusted TLS certificate secret.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "tlsValidateHostname": {
                    "description": "Whether the Pulsar client verify the validity of the host name from broker.",
                    "type": "boolean"
                },
                "topic": {
                    "description": "Name of the topic. See https://pulsar.apache.org/docs/en/concepts-messaging/",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "Configure the service URL for the Pulsar service.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PulsarTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.RateLimit": {
            "type": "object",
            "properties": {
                "requestsPerUnit": {
                    "type": "integer",
                    "format": "int32"
                },
                "unit": {
                    "description": "Defaults to Second",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RateLimit",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Sensor": {
            "description": "Sensor is the definition of a sensor resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SensorStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Sensor",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SensorList": {
            "description": "SensorList is the list of Sensor resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Sensor"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SensorList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SensorSpec": {
            "description": "SensorSpec represents desired sensor state",
            "type": "object",
            "required": [
                "dependencies",
                "triggers"
            ],
            "properties": {
                "dependencies": {
                    "description": "Dependencies is a list of the events that this sensor is dependent on.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.EventDependency"
                    }
                },
                "errorOnFailedRound": {
                    "description": "ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.",
                    "type": "boolean"
                },
                "eventBusName": {
                    "description": "EventBusName references to a EventBus name. By default the value is \"default\"",
                    "type": "string"
                },
                "replicas": {
                    "description": "Replicas is the sensor deployment replicas",
                    "type": "integer",
                    "format": "int32"
                },
                "template": {
                    "description": "Template is the pod specification for the sensor",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Template"
                },
                "triggers": {
                    "description": "Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.Trigger"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SensorSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SensorStatus": {
            "description": "SensorStatus contains information about the status of a sensor.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions are the latest available observations of a resource's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Condition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SensorStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.SlackTrigger": {
            "description": "SlackTrigger refers to the specification of the slack notification trigger.",
            "type": "object",
            "properties": {
                "channel": {
                    "description": "Channel refers to which Slack channel to send slack message.",
                    "type": "string"
                },
                "message": {
                    "description": "Message refers to the message to send to the Slack channel.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "slackToken": {
                    "description": "SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SlackTrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.StandardK8STrigger": {
            "description": "StandardK8STrigger is the standard Kubernetes resource trigger",
            "type": "object",
            "properties": {
                "liveObject": {
                    "description": "LiveObject specifies whether the resource should be directly fetched from K8s instead of being marshaled from the resource artifact. If set to true, the resource artifact must contain the information required to uniquely identify the resource in the cluster, that is, you must specify \"apiVersion\", \"kind\" as well as \"name\" and \"namespace\" meta data. Only valid for operation type `update`",
                    "type": "boolean"
                },
                "operation": {
                    "description": "Operation refers to the type of operation performed on the k8s resource. Default value is Create.",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters that is applied to resolved K8s trigger object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "patchStrategy": {
                    "description": "PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch. possible values: \"application/json-patch+json\" \"application/merge-patch+json\" \"application/strategic-merge-patch+json\" \"application/apply-patch+yaml\". Defaults to \"application/merge-patch+json\"",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the K8s resource file(s)",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArtifactLocation"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StandardK8STrigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.StatusPolicy": {
            "description": "StatusPolicy refers to the policy used to check the state of the trigger using response status",
            "type": "object",
            "required": [
                "allow"
            ],
            "properties": {
                "allow": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "StatusPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Template": {
            "description": "Template holds the information of a sensor deployment template",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "container": {
                    "description": "Container is the main container image to run in the sensor pod",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metadata": {
                    "description": "Metadata sets the pods's metadata, i.e. annotations and labels",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Metadata"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "priority": {
                    "description": "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run sensor pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "type": "string"
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Template",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TimeFilter": {
            "description": "TimeFilter describes a window in time. It filters out events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.",
            "type": "object",
            "required": [
                "start",
                "stop"
            ],
            "properties": {
                "start": {
                    "description": "Start is the beginning of a time window in UTC. Before this time, events for this dependency are ignored. Format is hh:mm:ss.",
                    "type": "string",
                    "default": ""
                },
                "stop": {
                    "description": "Stop is the end of a time window in UTC. After or equal to this time, events for this dependency are ignored and Format is hh:mm:ss. If it is smaller than Start, it is treated as next day of Start (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TimeFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.Trigger": {
            "description": "Trigger is an action taken, output produced, an event created, a message sent",
            "type": "object",
            "properties": {
                "parameters": {
                    "description": "Parameters is the list of parameters applied to the trigger template definition",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameter"
                    }
                },
                "policy": {
                    "description": "Policy to configure backoff and execution criteria for the trigger",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerPolicy"
                },
                "rateLimit": {
                    "description": "Rate limit, default unit is Second",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.RateLimit"
                },
                "retryStrategy": {
                    "description": "Retry strategy, defaults to no retry",
                    "$ref": "#/definitions/com.github.argoproj.argo-events.pkg.apis.common.Backoff"
                },
                "template": {
                    "description": "Template describes the trigger specification.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerTemplate"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Trigger",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerParameter": {
            "description": "TriggerParameter indicates a passed parameter to a service template",
            "type": "object",
            "required": [
                "dest"
            ],
            "properties": {
                "dest": {
                    "description": "Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.",
                    "type": "string",
                    "default": ""
                },
                "operation": {
                    "description": "Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.",
                    "type": "string"
                },
                "src": {
                    "description": "Src contains a source reference to the value of the parameter from a dependency",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.TriggerParameterSource"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerParameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerParameterSource": {
            "description": "TriggerParameterSource defines the source for a parameter from a event event",
            "type": "object",
            "required": [
                "dependencyName"
            ],
            "properties": {
                "contextKey": {
                    "description": "ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string"
                },
                "contextTemplate": {
                    "description": "ContextTemplate is a go-template for extracting a string from the event's context. If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
                    "type": "string"
                },
                "dataKey": {
                    "description": "DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
                    "type": "string"
                },
                "dataTemplate": {
                    "description": "DataTemplate is a go-template for extracting a string from the event's data. If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
                    "type": "string"
                },
                "dependencyName": {
                    "description": "DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerParameterSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerPolicy": {
            "description": "TriggerPolicy dictates the policy for the trigger retries",
            "type": "object",
            "properties": {
                "k8s": {
                    "description": "K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.K8SResourcePolicy"
                },
                "status": {
                    "description": "Status refers to the policy used to check the state of the trigger using response status",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.StatusPolicy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.TriggerTemplate": {
            "description": "TriggerTemplate is the template that describes trigger specification.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "argoWorkflow": {
                    "description": "ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger"
                },
                "awsLambda": {
                    "description": "AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.AWSLambdaTrigger"
                },
                "azureEventHubs": {
                    "description": "AzureEventHubs refers to the trigger send an event to an Azure Event Hub.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger"
                },
                "conditions": {
                    "description": "Conditions is the conditions to execute the trigger. For example: \"(dep01 || dep02) \u0026\u0026 dep04\"",
                    "type": "string"
                },
                "conditionsReset": {
                    "description": "Criteria to reset the conditons",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.ConditionsResetCriteria"
                    }
                },
                "custom": {
                    "description": "CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.CustomTrigger"
                },
                "http": {
                    "description": "HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.HTTPTrigger"
                },
                "k8s": {
                    "description": "StandardK8STrigger refers to the trigger designed to create or update a generic Kubernetes resource.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.StandardK8STrigger"
                },
                "kafka": {
                    "description": "Kafka refers to the trigger designed to place messages on Kafka topic.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.KafkaTrigger"
                },
                "log": {
                    "description": "Log refers to the trigger designed to invoke log the event.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.LogTrigger"
                },
                "name": {
                    "description": "Name is a unique name of the action to take.",
                    "type": "string",
                    "default": ""
                },
                "nats": {
                    "description": "NATS refers to the trigger designed to place message on NATS subject.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.NATSTrigger"
                },
                "openWhisk": {
                    "description": "OpenWhisk refers to the trigger designed to invoke OpenWhisk action.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.OpenWhiskTrigger"
                },
                "pulsar": {
                    "description": "Pulsar refers to the trigger designed to place messages on Pulsar topic.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.PulsarTrigger"
                },
                "slack": {
                    "description": "Slack refers to the trigger designed to send slack notification message.",
                    "$ref": "#/definitions/io.argoproj.sensor.v1alpha1.SlackTrigger"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TriggerTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.sensor.v1alpha1.URLArtifact": {
            "description": "URLArtifact contains information about an artifact at an http endpoint.",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "description": "Path is the complete URL",
                    "type": "string",
                    "default": ""
                },
                "verifyCert": {
                    "description": "VerifyCert decides whether the connection is secure or not",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "URLArtifact",
                    "version": "v1alpha1"
                }
            ]
        }
    }
}