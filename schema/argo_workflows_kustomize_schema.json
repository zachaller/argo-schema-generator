{
    "definitions": {
        "io.argoproj.workflow.v1alpha1.Amount": {
            "description": "Amount represent a numeric amount.",
            "type": "number",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Amount",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArchiveStrategy": {
            "description": "ArchiveStrategy describes how to archive files/directory when saving artifacts",
            "type": "object",
            "properties": {
                "none": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NoneStrategy"
                },
                "tar": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TarStrategy"
                },
                "zip": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ZipStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArchiveStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Arguments": {
            "description": "Arguments to a template",
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "Artifacts is the list of artifacts to pass to the template or workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "parameters": {
                    "description": "Parameters is the list of parameters to pass to the template or workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Parameter"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Arguments",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtGCStatus": {
            "description": "ArtGCStatus maintains state related to ArtifactGC",
            "type": "object",
            "properties": {
                "notSpecified": {
                    "description": "if this is true, we already checked to see if we need to do it and we don't",
                    "type": "boolean"
                },
                "podsRecouped": {
                    "description": "have completed Pods been processed? (mapped by Pod name) used to prevent re-processing the Status of a Pod more than once",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "strategiesProcessed": {
                    "description": "have Pods been started to perform this strategy? (enables us not to re-process what we've already done)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtGCStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Artifact": {
            "description": "Artifact indicates an artifact to place at a specified path",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "archive": {
                    "description": "Archive controls how the artifact will be saved to the artifact repository.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArchiveStrategy"
                },
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "artifactGC": {
                    "description": "ArtifactGC describes the strategy to use when to deleting an artifact from completed or deleted workflows",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGC"
                },
                "artifactory": {
                    "description": "Artifactory contains artifactory artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifact"
                },
                "azure": {
                    "description": "Azure contains Azure Storage artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifact"
                },
                "deleted": {
                    "description": "Has this been deleted?",
                    "type": "boolean"
                },
                "from": {
                    "description": "From allows an artifact to reference an artifact from a previous step",
                    "type": "string"
                },
                "fromExpression": {
                    "description": "FromExpression, if defined, is evaluated to specify the value for the artifact",
                    "type": "string"
                },
                "gcs": {
                    "description": "GCS contains GCS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifact"
                },
                "git": {
                    "description": "Git contains git artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GitArtifact"
                },
                "globalName": {
                    "description": "GlobalName exports an output artifact to the global scope, making it available as '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts",
                    "type": "string"
                },
                "hdfs": {
                    "description": "HDFS contains HDFS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifact"
                },
                "http": {
                    "description": "HTTP contains HTTP artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPArtifact"
                },
                "mode": {
                    "description": "mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "name of the artifact. must be unique within a template's inputs/outputs.",
                    "type": "string",
                    "default": ""
                },
                "optional": {
                    "description": "Make Artifacts optional, if Artifacts doesn't generate or exist",
                    "type": "boolean"
                },
                "oss": {
                    "description": "OSS contains OSS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifact"
                },
                "path": {
                    "description": "Path is the container path to the artifact",
                    "type": "string"
                },
                "raw": {
                    "description": "Raw contains raw artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RawArtifact"
                },
                "recurseMode": {
                    "description": "If mode is set, apply the permission recursively into the artifact if it is a folder",
                    "type": "boolean"
                },
                "s3": {
                    "description": "S3 contains S3 artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3Artifact"
                },
                "subPath": {
                    "description": "SubPath allows an artifact to be sourced from a subpath within the specified source",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Artifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactGC": {
            "description": "ArtifactGC describes how to delete artifacts from completed Workflows",
            "type": "object",
            "properties": {
                "podMetadata": {
                    "description": "PodMetadata is an optional field for specifying the Labels and Annotations that should be assigned to the Pod doing the deletion",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion",
                    "type": "string"
                },
                "strategy": {
                    "description": "Strategy is the strategy to use.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactGCSpec": {
            "description": "ArtifactGCSpec specifies the Artifacts that need to be deleted",
            "type": "object",
            "properties": {
                "artifactsByNode": {
                    "description": "ArtifactsByNode maps Node name to information pertaining to Artifacts on that Node",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactNodeSpec"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactGCSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactGCStatus": {
            "description": "ArtifactGCStatus describes the result of the deletion",
            "type": "object",
            "properties": {
                "artifactResultsByNode": {
                    "description": "ArtifactResultsByNode maps Node name to result",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactResultNodeStatus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactGCStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactLocation": {
            "description": "ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.",
            "type": "object",
            "properties": {
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "artifactory": {
                    "description": "Artifactory contains artifactory artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifact"
                },
                "azure": {
                    "description": "Azure contains Azure Storage artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifact"
                },
                "gcs": {
                    "description": "GCS contains GCS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifact"
                },
                "git": {
                    "description": "Git contains git artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GitArtifact"
                },
                "hdfs": {
                    "description": "HDFS contains HDFS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifact"
                },
                "http": {
                    "description": "HTTP contains HTTP artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPArtifact"
                },
                "oss": {
                    "description": "OSS contains OSS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifact"
                },
                "raw": {
                    "description": "Raw contains raw artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RawArtifact"
                },
                "s3": {
                    "description": "S3 contains S3 artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3Artifact"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactLocation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactNodeSpec": {
            "description": "ArtifactNodeSpec specifies the Artifacts that need to be deleted for a given Node",
            "type": "object",
            "properties": {
                "archiveLocation": {
                    "description": "ArchiveLocation is the template-level Artifact location specification",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactLocation"
                },
                "artifacts": {
                    "description": "Artifacts maps artifact name to Artifact description",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactNodeSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactPaths": {
            "description": "ArtifactPaths expands a step from a collection of artifacts",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "archive": {
                    "description": "Archive controls how the artifact will be saved to the artifact repository.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArchiveStrategy"
                },
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "artifactGC": {
                    "description": "ArtifactGC describes the strategy to use when to deleting an artifact from completed or deleted workflows",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGC"
                },
                "artifactory": {
                    "description": "Artifactory contains artifactory artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifact"
                },
                "azure": {
                    "description": "Azure contains Azure Storage artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifact"
                },
                "deleted": {
                    "description": "Has this been deleted?",
                    "type": "boolean"
                },
                "from": {
                    "description": "From allows an artifact to reference an artifact from a previous step",
                    "type": "string"
                },
                "fromExpression": {
                    "description": "FromExpression, if defined, is evaluated to specify the value for the artifact",
                    "type": "string"
                },
                "gcs": {
                    "description": "GCS contains GCS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifact"
                },
                "git": {
                    "description": "Git contains git artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GitArtifact"
                },
                "globalName": {
                    "description": "GlobalName exports an output artifact to the global scope, making it available as '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts",
                    "type": "string"
                },
                "hdfs": {
                    "description": "HDFS contains HDFS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifact"
                },
                "http": {
                    "description": "HTTP contains HTTP artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPArtifact"
                },
                "mode": {
                    "description": "mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "name of the artifact. must be unique within a template's inputs/outputs.",
                    "type": "string",
                    "default": ""
                },
                "optional": {
                    "description": "Make Artifacts optional, if Artifacts doesn't generate or exist",
                    "type": "boolean"
                },
                "oss": {
                    "description": "OSS contains OSS artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifact"
                },
                "path": {
                    "description": "Path is the container path to the artifact",
                    "type": "string"
                },
                "raw": {
                    "description": "Raw contains raw artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RawArtifact"
                },
                "recurseMode": {
                    "description": "If mode is set, apply the permission recursively into the artifact if it is a folder",
                    "type": "boolean"
                },
                "s3": {
                    "description": "S3 contains S3 artifact location details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3Artifact"
                },
                "subPath": {
                    "description": "SubPath allows an artifact to be sourced from a subpath within the specified source",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactPaths",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactRepository": {
            "description": "ArtifactRepository represents an artifact repository in which a controller will store its artifacts",
            "type": "object",
            "properties": {
                "archiveLogs": {
                    "description": "ArchiveLogs enables log archiving",
                    "type": "boolean"
                },
                "artifactory": {
                    "description": "Artifactory stores artifacts to JFrog Artifactory",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactoryArtifactRepository"
                },
                "azure": {
                    "description": "Azure stores artifact in an Azure Storage account",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.AzureArtifactRepository"
                },
                "gcs": {
                    "description": "GCS stores artifact in a GCS object store",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.GCSArtifactRepository"
                },
                "hdfs": {
                    "description": "HDFS stores artifacts in HDFS",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HDFSArtifactRepository"
                },
                "oss": {
                    "description": "OSS stores artifact in a OSS-compliant object store",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSArtifactRepository"
                },
                "s3": {
                    "description": "S3 stores artifact in a S3-compliant object store",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3ArtifactRepository"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactRepositoryRef": {
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "The name of the config map. Defaults to \"artifact-repositories\".",
                    "type": "string"
                },
                "key": {
                    "description": "The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactRepositoryRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactRepositoryRefStatus": {
            "type": "object",
            "properties": {
                "artifactRepository": {
                    "description": "The repository the workflow will use. This maybe empty before v3.1.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactRepository"
                },
                "configMap": {
                    "description": "The name of the config map. Defaults to \"artifact-repositories\".",
                    "type": "string"
                },
                "default": {
                    "description": "If this ref represents the default artifact repository, rather than a config map.",
                    "type": "boolean"
                },
                "key": {
                    "description": "The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.",
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of the config map. Defaults to the workflow's namespace, or the controller's namespace (if found).",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactRepositoryRefStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactResult": {
            "description": "ArtifactResult describes the result of attempting to delete a given Artifact",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "error": {
                    "description": "Error is an optional error message which should be set if Success==false",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the Artifact",
                    "type": "string",
                    "default": ""
                },
                "success": {
                    "description": "Success describes whether the deletion succeeded",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactResultNodeStatus": {
            "description": "ArtifactResultNodeStatus describes the result of the deletion on a given node",
            "type": "object",
            "properties": {
                "artifactResults": {
                    "description": "ArtifactResults maps Artifact name to result of the deletion",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactResult"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactResultNodeStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactSearchQuery": {
            "type": "object",
            "properties": {
                "artifactGCStrategies": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "artifactName": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "nodeId": {
                    "type": "string"
                },
                "nodeTypes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "templateName": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactSearchQuery",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactSearchResult": {
            "type": "object",
            "required": [
                "Artifact",
                "NodeID"
            ],
            "properties": {
                "Artifact": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                },
                "NodeID": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactSearchResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactoryArtifact": {
            "description": "ArtifactoryArtifact is the location of an artifactory artifact",
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "url": {
                    "description": "URL of the artifact",
                    "type": "string",
                    "default": ""
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactoryArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactoryArtifactRepository": {
            "description": "ArtifactoryArtifactRepository defines the controller configuration for an artifactory artifact repository",
            "type": "object",
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "repoURL": {
                    "description": "RepoURL is the url for artifactory repo.",
                    "type": "string"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactoryArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ArtifactoryAuth": {
            "description": "ArtifactoryAuth describes the secret selectors required for authenticating to artifactory",
            "type": "object",
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ArtifactoryAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.AzureArtifact": {
            "description": "AzureArtifact is the location of a an Azure Storage artifact",
            "type": "object",
            "required": [
                "endpoint",
                "container",
                "blob"
            ],
            "properties": {
                "accountKeySecret": {
                    "description": "AccountKeySecret is the secret selector to the Azure Blob Storage account access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "blob": {
                    "description": "Blob is the blob name (i.e., path) in the container where the artifact resides",
                    "type": "string",
                    "default": ""
                },
                "container": {
                    "description": "Container is the container where resources will be stored",
                    "type": "string",
                    "default": ""
                },
                "endpoint": {
                    "description": "Endpoint is the service url associated with an account. It is most likely \"https://\u003cACCOUNT_NAME\u003e.blob.core.windows.net\"",
                    "type": "string",
                    "default": ""
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.AzureArtifactRepository": {
            "description": "AzureArtifactRepository defines the controller configuration for an Azure Blob Storage artifact repository",
            "type": "object",
            "required": [
                "endpoint",
                "container"
            ],
            "properties": {
                "accountKeySecret": {
                    "description": "AccountKeySecret is the secret selector to the Azure Blob Storage account access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "blobNameFormat": {
                    "description": "BlobNameFormat is defines the format of how to store blob names. Can reference workflow variables",
                    "type": "string"
                },
                "container": {
                    "description": "Container is the container where resources will be stored",
                    "type": "string",
                    "default": ""
                },
                "endpoint": {
                    "description": "Endpoint is the service url associated with an account. It is most likely \"https://\u003cACCOUNT_NAME\u003e.blob.core.windows.net\"",
                    "type": "string",
                    "default": ""
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.AzureBlobContainer": {
            "description": "AzureBlobContainer contains the access information for interfacing with an Azure Blob Storage container",
            "type": "object",
            "required": [
                "endpoint",
                "container"
            ],
            "properties": {
                "accountKeySecret": {
                    "description": "AccountKeySecret is the secret selector to the Azure Blob Storage account access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "container": {
                    "description": "Container is the container where resources will be stored",
                    "type": "string",
                    "default": ""
                },
                "endpoint": {
                    "description": "Endpoint is the service url associated with an account. It is most likely \"https://\u003cACCOUNT_NAME\u003e.blob.core.windows.net\"",
                    "type": "string",
                    "default": ""
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "AzureBlobContainer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Backoff": {
            "description": "Backoff is a backoff strategy to use within retryStrategy",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")",
                    "type": "string"
                },
                "factor": {
                    "description": "Factor is a factor to multiply the base duration after each failed retry",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxDuration": {
                    "description": "MaxDuration is the maximum amount of time allowed for the backoff strategy",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Backoff",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.BasicAuth": {
            "description": "BasicAuth describes the secret selectors required for basic authentication",
            "type": "object",
            "properties": {
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "BasicAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Cache": {
            "description": "Cache is the configuration for the type of cache to be used",
            "type": "object",
            "required": [
                "configMap"
            ],
            "properties": {
                "configMap": {
                    "description": "ConfigMap sets a ConfigMap-based cache",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Cache",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ClientCertAuth": {
            "description": "ClientCertAuth holds necessary information for client authentication via certificates",
            "type": "object",
            "properties": {
                "clientCertSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "clientKeySecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClientCertAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ClusterWorkflowTemplate": {
            "description": "ClusterWorkflowTemplate is the definition of a workflow template resource in cluster scope",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterWorkflowTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ClusterWorkflowTemplateList": {
            "description": "ClusterWorkflowTemplateList is list of ClusterWorkflowTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ClusterWorkflowTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ClusterWorkflowTemplateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Column": {
            "description": "Column is a custom column that will be exposed in the Workflow List View.",
            "type": "object",
            "required": [
                "name",
                "type",
                "key"
            ],
            "properties": {
                "key": {
                    "description": "The key of the label or annotation, e.g., \"workflows.argoproj.io/completed\".",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "The name of this column, e.g., \"Workflow Completed\".",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "The type of this column, \"label\" or \"annotation\".",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Column",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Condition": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is the condition message",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the condition",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the type of condition",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Condition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContainerNode": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerNode",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContainerSetRetryStrategy": {
            "type": "object",
            "required": [
                "retries"
            ],
            "properties": {
                "duration": {
                    "description": "Duration is the time between each retry, examples values are \"300ms\", \"1s\" or \"5m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
                    "type": "string"
                },
                "retries": {
                    "description": "Nbr of retries",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerSetRetryStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContainerSetTemplate": {
            "type": "object",
            "required": [
                "containers"
            ],
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContainerNode"
                    }
                },
                "retryStrategy": {
                    "description": "RetryStrategy describes how to retry a container nodes in the container set if it fails. Nbr of retries(default 0) and sleep duration between retries(default 0s, instant retry) can be set.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContainerSetRetryStrategy"
                },
                "volumeMounts": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContainerSetTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ContinueOn": {
            "description": "ContinueOn defines if a workflow should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both.",
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean"
                },
                "failed": {
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ContinueOn",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Counter": {
            "description": "Counter is a Counter prometheus metric",
            "type": "object",
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "description": "Value is the value of the metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Counter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CreateS3BucketOptions": {
            "description": "CreateS3BucketOptions options used to determine automatic automatic bucket-creation process",
            "type": "object",
            "properties": {
                "objectLocking": {
                    "description": "ObjectLocking Enable object locking",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CreateS3BucketOptions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflow": {
            "description": "CronWorkflow is the definition of a scheduled workflow resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflowSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflowStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflow",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflowList": {
            "description": "CronWorkflowList is list of CronWorkflow resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflowList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflowSpec": {
            "description": "CronWorkflowSpec is the specification of a CronWorkflow",
            "type": "object",
            "required": [
                "workflowSpec",
                "schedule"
            ],
            "properties": {
                "concurrencyPolicy": {
                    "description": "ConcurrencyPolicy is the K8s-style concurrency policy that will be used",
                    "type": "string"
                },
                "failedJobsHistoryLimit": {
                    "description": "FailedJobsHistoryLimit is the number of failed jobs to be kept at a time",
                    "type": "integer",
                    "format": "int32"
                },
                "schedule": {
                    "description": "Schedule is a schedule to run the Workflow in Cron format",
                    "type": "string",
                    "default": ""
                },
                "startingDeadlineSeconds": {
                    "description": "StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.",
                    "type": "integer",
                    "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                    "description": "SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time",
                    "type": "integer",
                    "format": "int32"
                },
                "suspend": {
                    "description": "Suspend is a flag that will stop new CronWorkflows from running if set to true",
                    "type": "boolean"
                },
                "timezone": {
                    "description": "Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.",
                    "type": "string"
                },
                "workflowMetadata": {
                    "description": "WorkflowMetadata contains some metadata of the workflow to be run",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "workflowSpec": {
                    "description": "WorkflowSpec is the spec of the workflow to be run",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflowSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.CronWorkflowStatus": {
            "description": "CronWorkflowStatus is the status of a CronWorkflow",
            "type": "object",
            "required": [
                "active",
                "lastScheduledTime",
                "conditions"
            ],
            "properties": {
                "active": {
                    "description": "Active is a list of active workflows stemming from this CronWorkflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    }
                },
                "conditions": {
                    "description": "Conditions is a list of conditions the CronWorkflow may have",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Condition"
                    }
                },
                "lastScheduledTime": {
                    "description": "LastScheduleTime is the last time the CronWorkflow was scheduled",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "CronWorkflowStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.DAGTask": {
            "description": "DAGTask represents a node in the graph during DAG execution",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "arguments": {
                    "description": "Arguments are the parameter and artifact arguments to the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "continueOn": {
                    "description": "ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContinueOn"
                },
                "dependencies": {
                    "description": "Dependencies are name of other targets which this depends on",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "depends": {
                    "description": "Depends are name of other targets which this depends on",
                    "type": "string"
                },
                "hooks": {
                    "description": "Hooks hold the lifecycle hook which is invoked at lifecycle of task, irrespective of the success, failure, or error status of the primary task",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LifecycleHook"
                    }
                },
                "inline": {
                    "description": "Inline is the template. Template must be empty if this is declared (and vice-versa).",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                },
                "name": {
                    "description": "Name is the name of the target",
                    "type": "string",
                    "default": ""
                },
                "onExit": {
                    "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.",
                    "type": "string"
                },
                "template": {
                    "description": "Name of template to execute",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource to execute.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                },
                "when": {
                    "description": "When is an expression in which the task should conditionally execute",
                    "type": "string"
                },
                "withItems": {
                    "description": "WithItems expands a task into multiple parallel tasks from the items in the list",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Item"
                    }
                },
                "withParam": {
                    "description": "WithParam expands a task into multiple parallel tasks from the value in the parameter, which is expected to be a JSON list.",
                    "type": "string"
                },
                "withSequence": {
                    "description": "WithSequence expands a task into a numeric sequence",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Sequence"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DAGTask",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.DAGTemplate": {
            "description": "DAGTemplate is a template subtype for directed acyclic graph templates",
            "type": "object",
            "required": [
                "tasks"
            ],
            "properties": {
                "failFast": {
                    "description": "This flag is for DAG logic. The DAG logic has a built-in \"fail fast\" feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442",
                    "type": "boolean"
                },
                "target": {
                    "description": "Target are one or more names of targets to execute in a DAG",
                    "type": "string"
                },
                "tasks": {
                    "description": "Tasks are a list of DAG tasks",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.DAGTask"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DAGTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Data": {
            "description": "Data is a data template",
            "type": "object",
            "required": [
                "source",
                "transformation"
            ],
            "properties": {
                "source": {
                    "description": "Source sources external data into a data template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.DataSource"
                },
                "transformation": {
                    "description": "Transformation applies a set of transformations",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TransformationStep"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Data",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.DataSource": {
            "description": "DataSource sources external data into a data template",
            "type": "object",
            "properties": {
                "artifactPaths": {
                    "description": "ArtifactPaths is a data transformation that collects a list of artifact paths",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactPaths"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "DataSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Event": {
            "type": "object",
            "required": [
                "selector"
            ],
            "properties": {
                "selector": {
                    "description": "Selector (https://github.com/antonmedv/expr) that we must must match the event. E.g. `payload.message == \"test\"`",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Event",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ExecutorConfig": {
            "description": "ExecutorConfig holds configurations of an executor container.",
            "type": "object",
            "properties": {
                "serviceAccountName": {
                    "description": "ServiceAccountName specifies the service account name of the executor container.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ExecutorConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GCSArtifact": {
            "description": "GCSArtifact is the location of a GCS artifact",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "key": {
                    "description": "Key is the path in the bucket where the artifact resides",
                    "type": "string",
                    "default": ""
                },
                "serviceAccountKeySecret": {
                    "description": "ServiceAccountKeySecret is the secret selector to the bucket's service account key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GCSArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GCSArtifactRepository": {
            "description": "GCSArtifactRepository defines the controller configuration for a GCS artifact repository",
            "type": "object",
            "properties": {
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "keyFormat": {
                    "description": "KeyFormat is defines the format of how to store keys. Can reference workflow variables",
                    "type": "string"
                },
                "serviceAccountKeySecret": {
                    "description": "ServiceAccountKeySecret is the secret selector to the bucket's service account key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GCSArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GCSBucket": {
            "description": "GCSBucket contains the access information for interfacring with a GCS bucket",
            "type": "object",
            "properties": {
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "serviceAccountKeySecret": {
                    "description": "ServiceAccountKeySecret is the secret selector to the bucket's service account key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GCSBucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Gauge": {
            "description": "Gauge is a Gauge prometheus metric",
            "type": "object",
            "required": [
                "value",
                "realtime"
            ],
            "properties": {
                "realtime": {
                    "description": "Realtime emits this metric in real time if applicable",
                    "type": "boolean"
                },
                "value": {
                    "description": "Value is the value of the metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Gauge",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.GitArtifact": {
            "description": "GitArtifact is the location of an git artifact",
            "type": "object",
            "required": [
                "repo"
            ],
            "properties": {
                "branch": {
                    "description": "Branch is the branch to fetch when `SingleBranch` is enabled",
                    "type": "string"
                },
                "depth": {
                    "description": "Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip",
                    "type": "integer",
                    "format": "int64"
                },
                "disableSubmodules": {
                    "description": "DisableSubmodules disables submodules during git clone",
                    "type": "boolean"
                },
                "fetch": {
                    "description": "Fetch specifies a number of refs that should be fetched before checkout",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "insecureIgnoreHostKey": {
                    "description": "InsecureIgnoreHostKey disables SSH strict host key checking during git clone",
                    "type": "boolean"
                },
                "passwordSecret": {
                    "description": "PasswordSecret is the secret selector to the repository password",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "repo": {
                    "description": "Repo is the git repository",
                    "type": "string",
                    "default": ""
                },
                "revision": {
                    "description": "Revision is the git commit, tag, branch to checkout",
                    "type": "string"
                },
                "singleBranch": {
                    "description": "SingleBranch enables single branch clone, using the `branch` parameter",
                    "type": "boolean"
                },
                "sshPrivateKeySecret": {
                    "description": "SSHPrivateKeySecret is the secret selector to the repository ssh private key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "usernameSecret": {
                    "description": "UsernameSecret is the secret selector to the repository username",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "GitArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSArtifact": {
            "description": "HDFSArtifact is the location of an HDFS artifact",
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "addresses": {
                    "description": "Addresses is accessible addresses of HDFS name nodes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "force": {
                    "description": "Force copies a file forcibly even if it exists",
                    "type": "boolean"
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "path": {
                    "description": "Path is a file path in HDFS",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSArtifactRepository": {
            "description": "HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository",
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "Addresses is accessible addresses of HDFS name nodes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "force": {
                    "description": "Force copies a file forcibly even if it exists",
                    "type": "boolean"
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "pathFormat": {
                    "description": "PathFormat is defines the format of path to store a file. Can reference workflow variables",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSConfig": {
            "description": "HDFSConfig is configurations for HDFS",
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "Addresses is accessible addresses of HDFS name nodes",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "hdfsUser": {
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HDFSKrbConfig": {
            "description": "HDFSKrbConfig is auth configurations for Kerberos",
            "type": "object",
            "properties": {
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "krbRealm": {
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                },
                "krbServicePrincipalName": {
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.",
                    "type": "string"
                },
                "krbUsername": {
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HDFSKrbConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTP": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "body": {
                    "description": "Body is content of the HTTP Request",
                    "type": "string"
                },
                "bodyFrom": {
                    "description": "BodyFrom is  content of the HTTP Request as Bytes",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPBodySource"
                },
                "headers": {
                    "description": "Headers are an optional list of headers to send with HTTP requests",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPHeader"
                    }
                },
                "insecureSkipVerify": {
                    "description": "InsecureSkipVerify is a bool when if set to true will skip TLS verification for the HTTP client",
                    "type": "boolean"
                },
                "method": {
                    "description": "Method is HTTP methods for HTTP Request",
                    "type": "string"
                },
                "successCondition": {
                    "description": "SuccessCondition is an expression if evaluated to true is considered successful",
                    "type": "string"
                },
                "timeoutSeconds": {
                    "description": "TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds",
                    "type": "integer",
                    "format": "int64"
                },
                "url": {
                    "description": "URL of the HTTP Request",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTP",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPArtifact": {
            "description": "HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container",
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "auth": {
                    "description": "Auth contains information for client authentication",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPAuth"
                },
                "headers": {
                    "description": "Headers are an optional list of headers to send with HTTP requests for artifacts",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Header"
                    }
                },
                "url": {
                    "description": "URL of the artifact",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPAuth": {
            "type": "object",
            "properties": {
                "basicAuth": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.BasicAuth"
                },
                "clientCert": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ClientCertAuth"
                },
                "oauth2": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OAuth2Auth"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPAuth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPBodySource": {
            "description": "HTTPBodySource contains the source of the HTTP body.",
            "type": "object",
            "properties": {
                "bytes": {
                    "type": "string",
                    "format": "byte"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPBodySource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPHeader": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string"
                },
                "valueFrom": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTPHeaderSource"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPHeader",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.HTTPHeaderSource": {
            "type": "object",
            "properties": {
                "secretKeyRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "HTTPHeaderSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Header": {
            "description": "Header indicate a key-value request header to be used when fetching artifacts over HTTP",
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "description": "Name is the header name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the literal value to use for the header",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Header",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Histogram": {
            "description": "Histogram is a Histogram prometheus metric",
            "type": "object",
            "required": [
                "value",
                "buckets"
            ],
            "properties": {
                "buckets": {
                    "description": "Buckets is a list of bucket divisors for the histogram",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Amount"
                    }
                },
                "value": {
                    "description": "Value is the value of the metric",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Histogram",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Inputs": {
            "description": "Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another",
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "Artifact are a list of artifacts passed as inputs",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "parameters": {
                    "description": "Parameters are a list of parameters passed as inputs",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Parameter"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Inputs",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Item": {
            "description": "Item expands a single workflow step into multiple parallel steps The value of Item can be a map, string, bool, or number",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Item",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LabelKeys": {
            "description": "LabelKeys is list of keys",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LabelKeys",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LabelValueFrom": {
            "type": "object",
            "required": [
                "expression"
            ],
            "properties": {
                "expression": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LabelValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LabelValues": {
            "description": "Labels is list of workflow labels",
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LabelValues",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.LifecycleHook": {
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments hold arguments to the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "expression": {
                    "description": "Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored",
                    "type": "string"
                },
                "template": {
                    "description": "Template is the name of the template to execute by the hook",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource to execute by the hook",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "LifecycleHook",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Link": {
            "description": "A link to another app.",
            "type": "object",
            "required": [
                "name",
                "scope",
                "url"
            ],
            "properties": {
                "name": {
                    "description": "The name of the link, E.g. \"Workflow Logs\" or \"Pod Logs\"",
                    "type": "string",
                    "default": ""
                },
                "scope": {
                    "description": "\"workflow\", \"pod\", \"pod-logs\", \"event-source-logs\", \"sensor-logs\", \"workflow-list\" or \"chat\"",
                    "type": "string",
                    "default": ""
                },
                "url": {
                    "description": "The URL. Can contain \"${metadata.namespace}\", \"${metadata.name}\", \"${status.startedAt}\", \"${status.finishedAt}\" or any other element in workflow yaml, e.g. \"${workflow.metadata.annotations.userDefinedKey}\"",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Link",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ManifestFrom": {
            "type": "object",
            "required": [
                "artifact"
            ],
            "properties": {
                "artifact": {
                    "description": "Artifact contains the artifact to use",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ManifestFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MemoizationStatus": {
            "description": "MemoizationStatus is the status of this memoized node",
            "type": "object",
            "required": [
                "hit",
                "key",
                "cacheName"
            ],
            "properties": {
                "cacheName": {
                    "description": "Cache is the name of the cache that was used",
                    "type": "string",
                    "default": ""
                },
                "hit": {
                    "description": "Hit indicates whether this node was created from a cache entry",
                    "type": "boolean",
                    "default": false
                },
                "key": {
                    "description": "Key is the name of the key used for this node's cache",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MemoizationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Memoize": {
            "description": "Memoization enables caching for the Outputs of the template",
            "type": "object",
            "required": [
                "key",
                "cache",
                "maxAge"
            ],
            "properties": {
                "cache": {
                    "description": "Cache sets and configures the kind of cache",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Cache"
                },
                "key": {
                    "description": "Key is the key to use as the caching key",
                    "type": "string",
                    "default": ""
                },
                "maxAge": {
                    "description": "MaxAge is the maximum age (e.g. \"180s\", \"24h\") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Memoize",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Metadata": {
            "description": "Pod metdata",
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Metadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MetricLabel": {
            "description": "MetricLabel is a single label for a prometheus metric",
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MetricLabel",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Metrics": {
            "description": "Metrics are a list of metrics emitted from a Workflow/Template",
            "type": "object",
            "required": [
                "prometheus"
            ],
            "properties": {
                "prometheus": {
                    "description": "Prometheus is a list of prometheus metrics to be emitted",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Prometheus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Metrics",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Mutex": {
            "description": "Mutex holds Mutex configuration",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name of the mutex",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Mutex",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MutexHolding": {
            "description": "MutexHolding describes the mutex and the object which is holding it.",
            "type": "object",
            "properties": {
                "holder": {
                    "description": "Holder is a reference to the object which holds the Mutex. Holding Scenario:\n  1. Current workflow's NodeID which is holding the lock.\n     e.g: ${NodeID}\nWaiting Scenario:\n  1. Current workflow or other workflow NodeID which is holding the lock.\n     e.g: ${WorkflowName}/${NodeID}",
                    "type": "string"
                },
                "mutex": {
                    "description": "Reference for the mutex e.g: ${namespace}/mutex/${mutexName}",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MutexHolding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.MutexStatus": {
            "description": "MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks.",
            "type": "object",
            "properties": {
                "holding": {
                    "description": "Holding is a list of mutexes and their respective objects that are held by mutex lock for this workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MutexHolding"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "waiting": {
                    "description": "Waiting is a list of mutexes and their respective objects this workflow is waiting for.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MutexHolding"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "MutexStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "outputs": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "phase": {
                    "type": "string"
                },
                "progress": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeStatus": {
            "description": "NodeStatus contains status information about an individual node in the workflow",
            "type": "object",
            "required": [
                "id",
                "name",
                "type"
            ],
            "properties": {
                "boundaryID": {
                    "description": "BoundaryID indicates the node ID of the associated template root node in which this node belongs to",
                    "type": "string"
                },
                "children": {
                    "description": "Children is a list of child node IDs",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "daemoned": {
                    "description": "Daemoned tracks whether or not this node was daemoned and need to be terminated",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "DisplayName is a human readable representation of the node. Unique within a template boundary",
                    "type": "string"
                },
                "estimatedDuration": {
                    "description": "EstimatedDuration in seconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "finishedAt": {
                    "description": "Time at which this node completed",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "hostNodeName": {
                    "description": "HostNodeName name of the Kubernetes node on which the Pod is running, if applicable",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic",
                    "type": "string",
                    "default": ""
                },
                "inputs": {
                    "description": "Inputs captures input parameter values and artifact locations supplied to this template invocation",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Inputs"
                },
                "memoizationStatus": {
                    "description": "MemoizationStatus holds information about cached nodes",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MemoizationStatus"
                },
                "message": {
                    "description": "A human readable message indicating details about why the node is in this condition.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is unique name in the node tree used to generate the node ID",
                    "type": "string",
                    "default": ""
                },
                "outboundNodes": {
                    "description": "OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.\n\nIn the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "outputs": {
                    "description": "Outputs captures output parameter values and artifact locations produced by this template invocation",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "phase": {
                    "description": "Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine. Will be one of these values \"Pending\", \"Running\" before the node is completed, or \"Succeeded\", \"Skipped\", \"Failed\", \"Error\", or \"Omitted\" as a final state.",
                    "type": "string"
                },
                "podIP": {
                    "description": "PodIP captures the IP of the pod for daemoned steps",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress to completion",
                    "type": "string"
                },
                "resourcesDuration": {
                    "description": "ResourcesDuration is indicative, but not accurate, resource duration. This is populated when the nodes completes.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64",
                        "default": 0
                    }
                },
                "startedAt": {
                    "description": "Time at which this node started",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "synchronizationStatus": {
                    "description": "SynchronizationStatus is the synchronization status of the node",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeSynchronizationStatus"
                },
                "templateName": {
                    "description": "TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                },
                "templateScope": {
                    "description": "TemplateScope is the template scope in which the template of this node was retrieved.",
                    "type": "string"
                },
                "type": {
                    "description": "Type indicates type of node",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NodeSynchronizationStatus": {
            "description": "NodeSynchronizationStatus stores the status of a node",
            "type": "object",
            "properties": {
                "waiting": {
                    "description": "Waiting is the name of the lock that this node is waiting for",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NodeSynchronizationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.NoneStrategy": {
            "description": "NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "NoneStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OAuth2Auth": {
            "description": "OAuth2Auth holds all information for client authentication via OAuth2 tokens",
            "type": "object",
            "properties": {
                "clientIDSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "clientSecretSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "endpointParams": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OAuth2EndpointParam"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "tokenURLSecret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OAuth2Auth",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OAuth2EndpointParam": {
            "description": "EndpointParam is for requesting optional fields that should be sent in the oauth request",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "description": "Name is the header name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the literal value to use for the header",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OAuth2EndpointParam",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSArtifact": {
            "description": "OSSArtifact is the location of an Alibaba Cloud OSS artifact",
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "key": {
                    "description": "Key is the path in the bucket where the artifact resides",
                    "type": "string",
                    "default": ""
                },
                "lifecycleRule": {
                    "description": "LifecycleRule specifies how to manage bucket's lifecycle",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSLifecycleRule"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "securityToken": {
                    "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSArtifactRepository": {
            "description": "OSSArtifactRepository defines the controller configuration for an OSS artifact repository",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "keyFormat": {
                    "description": "KeyFormat is defines the format of how to store keys. Can reference workflow variables",
                    "type": "string"
                },
                "lifecycleRule": {
                    "description": "LifecycleRule specifies how to manage bucket's lifecycle",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSLifecycleRule"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "securityToken": {
                    "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSBucket": {
            "description": "OSSBucket contains the access information required for interfacing with an Alibaba Cloud OSS bucket",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist",
                    "type": "boolean"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "lifecycleRule": {
                    "description": "LifecycleRule specifies how to manage bucket's lifecycle",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.OSSLifecycleRule"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "securityToken": {
                    "description": "SecurityToken is the user's temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSBucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.OSSLifecycleRule": {
            "description": "OSSLifecycleRule specifies how to manage bucket's lifecycle",
            "type": "object",
            "properties": {
                "markDeletionAfterDays": {
                    "description": "MarkDeletionAfterDays is the number of days before we delete objects in the bucket",
                    "type": "integer",
                    "format": "int32"
                },
                "markInfrequentAccessAfterDays": {
                    "description": "MarkInfrequentAccessAfterDays is the number of days before we convert the objects in the bucket to Infrequent Access (IA) storage type",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "OSSLifecycleRule",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Object": {
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Object",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Outputs": {
            "description": "Outputs hold parameters, artifacts, and results from a step",
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "Artifacts holds the list of output artifacts produced by a step",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Artifact"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "exitCode": {
                    "description": "ExitCode holds the exit code of a script template",
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters holds the list of output parameters produced by a step",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Parameter"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "result": {
                    "description": "Result holds the result (stdout) of a script template",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Outputs",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ParallelSteps": {
            "type": "array",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ParallelSteps",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Parameter": {
            "description": "Parameter indicate a passed string parameter to a service template with an optional default value",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "default": {
                    "description": "Default is the default value to use for an input parameter if a value was not supplied",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the parameter description",
                    "type": "string"
                },
                "enum": {
                    "description": "Enum holds a list of string values to choose from, for the actual value of the parameter",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "globalName": {
                    "description": "GlobalName exports an output parameter to the global scope, making it available as '{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the parameter name",
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "description": "Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "ValueFrom is the source for the output parameter's value",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ValueFrom"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Parameter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Plugin": {
            "description": "Plugin is an Object with exactly one key",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Plugin",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.PodGC": {
            "description": "PodGC describes how to delete completed pods as they complete",
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "LabelSelector is the label selector to check if the pods match the labels before being added to the pod GC queue.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "strategy": {
                    "description": "Strategy is the strategy to use. One of \"OnPodCompletion\", \"OnPodSuccess\", \"OnWorkflowCompletion\", \"OnWorkflowSuccess\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "PodGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Prometheus": {
            "description": "Prometheus is a prometheus metric to be emitted",
            "type": "object",
            "required": [
                "name",
                "help"
            ],
            "properties": {
                "counter": {
                    "description": "Counter is a counter metric",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Counter"
                },
                "gauge": {
                    "description": "Gauge is a gauge metric",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Gauge"
                },
                "help": {
                    "description": "Help is a string that describes the metric",
                    "type": "string",
                    "default": ""
                },
                "histogram": {
                    "description": "Histogram is a histogram metric",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Histogram"
                },
                "labels": {
                    "description": "Labels is a list of metric labels",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MetricLabel"
                    }
                },
                "name": {
                    "description": "Name is the name of the metric",
                    "type": "string",
                    "default": ""
                },
                "when": {
                    "description": "When is a conditional statement that decides when to emit the metric",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Prometheus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RawArtifact": {
            "description": "RawArtifact allows raw string content to be placed as an artifact in a container",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "description": "Data is the string contents of the artifact",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RawArtifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ResourceTemplate": {
            "description": "ResourceTemplate is a template subtype to manipulate kubernetes resources",
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "description": "Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch",
                    "type": "string",
                    "default": ""
                },
                "failureCondition": {
                    "description": "FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed",
                    "type": "string"
                },
                "flags": {
                    "description": "Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [\n\t\"--validate=false\"  # disable resource validation\n]",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "manifest": {
                    "description": "Manifest contains the kubernetes manifest",
                    "type": "string"
                },
                "manifestFrom": {
                    "description": "ManifestFrom is the source for a single kubernetes manifest",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ManifestFrom"
                },
                "mergeStrategy": {
                    "description": "MergeStrategy is the strategy used to merge a patch. It defaults to \"strategic\" Must be one of: strategic, merge, json",
                    "type": "string"
                },
                "setOwnerReference": {
                    "description": "SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.",
                    "type": "boolean"
                },
                "successCondition": {
                    "description": "SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ResourceTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RetryAffinity": {
            "description": "RetryAffinity prevents running steps on the same host.",
            "type": "object",
            "properties": {
                "nodeAntiAffinity": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryNodeAntiAffinity"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryAffinity",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RetryNodeAntiAffinity": {
            "description": "RetryNodeAntiAffinity is a placeholder for future expansion, only empty nodeAntiAffinity is allowed. In order to prevent running steps on the same host, it uses \"kubernetes.io/hostname\".",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryNodeAntiAffinity",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.RetryStrategy": {
            "description": "RetryStrategy provides controls on how to retry a workflow step",
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Affinity prevents running workflow's step on the same host",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryAffinity"
                },
                "backoff": {
                    "description": "Backoff is a backoff strategy",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Backoff"
                },
                "expression": {
                    "description": "Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored",
                    "type": "string"
                },
                "limit": {
                    "description": "Limit is the maximum number of retry attempts when retrying a container. It does not include the original container; the maximum number of total attempts will be `limit + 1`.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "retryPolicy": {
                    "description": "RetryPolicy is a policy of NodePhase statuses that will be retried",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "RetryStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3Artifact": {
            "description": "S3Artifact is the location of an S3 artifact",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CreateS3BucketOptions"
                },
                "encryptionOptions": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3EncryptionOptions"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "insecure": {
                    "description": "Insecure will connect to the service with TLS",
                    "type": "boolean"
                },
                "key": {
                    "description": "Key is the key in the bucket where the artifact resides",
                    "type": "string"
                },
                "region": {
                    "description": "Region contains the optional bucket region",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3Artifact",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3ArtifactRepository": {
            "description": "S3ArtifactRepository defines the controller configuration for an S3 artifact repository",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CreateS3BucketOptions"
                },
                "encryptionOptions": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3EncryptionOptions"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "insecure": {
                    "description": "Insecure will connect to the service with TLS",
                    "type": "boolean"
                },
                "keyFormat": {
                    "description": "KeyFormat is defines the format of how to store keys. Can reference workflow variables",
                    "type": "string"
                },
                "keyPrefix": {
                    "description": "KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts. DEPRECATED. Use KeyFormat instead",
                    "type": "string"
                },
                "region": {
                    "description": "Region contains the optional bucket region",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3ArtifactRepository",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3Bucket": {
            "description": "S3Bucket contains the access information required for interfacing with an S3 bucket",
            "type": "object",
            "properties": {
                "accessKeySecret": {
                    "description": "AccessKeySecret is the secret selector to the bucket's access key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "bucket": {
                    "description": "Bucket is the name of the bucket",
                    "type": "string"
                },
                "createBucketIfNotPresent": {
                    "description": "CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CreateS3BucketOptions"
                },
                "encryptionOptions": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.S3EncryptionOptions"
                },
                "endpoint": {
                    "description": "Endpoint is the hostname of the bucket endpoint",
                    "type": "string"
                },
                "insecure": {
                    "description": "Insecure will connect to the service with TLS",
                    "type": "boolean"
                },
                "region": {
                    "description": "Region contains the optional bucket region",
                    "type": "string"
                },
                "roleARN": {
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
                    "type": "string"
                },
                "secretKeySecret": {
                    "description": "SecretKeySecret is the secret selector to the bucket's secret key",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                },
                "useSDKCreds": {
                    "description": "UseSDKCreds tells the driver to figure out credentials based on sdk defaults.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3Bucket",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.S3EncryptionOptions": {
            "description": "S3EncryptionOptions used to determine encryption options during s3 operations",
            "type": "object",
            "properties": {
                "enableEncryption": {
                    "description": "EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used",
                    "type": "boolean"
                },
                "kmsEncryptionContext": {
                    "description": "KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information",
                    "type": "string"
                },
                "kmsKeyId": {
                    "description": "KMSKeyId tells the driver to encrypt the object using the specified KMS Key.",
                    "type": "string"
                },
                "serverSideCustomerKeySecret": {
                    "description": "ServerSideCustomerKeySecret tells the driver to encrypt the output artifacts using SSE-C with the specified secret.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "S3EncryptionOptions",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ScriptTemplate": {
            "description": "ScriptTemplate is a template subtype to enable scripting through code steps",
            "type": "object",
            "required": [
                "name",
                "source"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "source": {
                    "description": "Source contains the source code of the script to execute",
                    "type": "string",
                    "default": ""
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ScriptTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SemaphoreHolding": {
            "type": "object",
            "properties": {
                "holders": {
                    "description": "Holders stores the list of current holder names in the workflow.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "semaphore": {
                    "description": "Semaphore stores the semaphore name.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SemaphoreHolding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SemaphoreRef": {
            "description": "SemaphoreRef is a reference of Semaphore",
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "ConfigMapKeyRef is configmap selector for Semaphore configuration",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SemaphoreRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SemaphoreStatus": {
            "type": "object",
            "properties": {
                "holding": {
                    "description": "Holding stores the list of resource acquired synchronization lock for workflows.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreHolding"
                    }
                },
                "waiting": {
                    "description": "Waiting indicates the list of current synchronization lock holders.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreHolding"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SemaphoreStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Sequence": {
            "description": "Sequence expands a workflow step into numeric range",
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count is number of elements in the sequence (default: 0). Not to be used with end",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "end": {
                    "description": "Number at which to end the sequence (default: 0). Not to be used with Count",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "format": {
                    "description": "Format is a printf format string to format the value in the sequence",
                    "type": "string"
                },
                "start": {
                    "description": "Number at which to start the sequence (default: 0)",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Sequence",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Submit": {
            "type": "object",
            "required": [
                "workflowTemplateRef"
            ],
            "properties": {
                "arguments": {
                    "description": "Arguments extracted from the event and then set as arguments to the workflow created.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "metadata": {
                    "description": "Metadata optional means to customize select fields of the workflow metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "workflowTemplateRef": {
                    "description": "WorkflowTemplateRef the workflow template to submit",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplateRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Submit",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SubmitOpts": {
            "description": "SubmitOpts are workflow submission options",
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations adds to metadata.labels",
                    "type": "string"
                },
                "dryRun": {
                    "description": "DryRun validates the workflow on the client-side without creating it. This option is not supported in API",
                    "type": "boolean"
                },
                "entryPoint": {
                    "description": "Entrypoint overrides spec.entrypoint",
                    "type": "string"
                },
                "generateName": {
                    "description": "GenerateName overrides metadata.generateName",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels adds to metadata.labels",
                    "type": "string"
                },
                "name": {
                    "description": "Name overrides metadata.name",
                    "type": "string"
                },
                "ownerReference": {
                    "description": "OwnerReference creates a metadata.ownerReference",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                },
                "parameters": {
                    "description": "Parameters passes input parameters to workflow",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "podPriorityClassName": {
                    "description": "Set the podPriorityClassName of the workflow",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first.",
                    "type": "integer",
                    "format": "int32"
                },
                "serverDryRun": {
                    "description": "ServerDryRun validates the workflow on the server-side without creating it",
                    "type": "boolean"
                },
                "serviceAccount": {
                    "description": "ServiceAccount runs all pods in the workflow using specified ServiceAccount.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SubmitOpts",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SuppliedValueFrom": {
            "description": "SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SuppliedValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SuspendTemplate": {
            "description": "SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration is the seconds to wait before automatically resuming a template. Must be a string. Default unit is seconds. Could also be a Duration, e.g.: \"2m\", \"6h\", \"1d\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SuspendTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Synchronization": {
            "description": "Synchronization holds synchronization lock configuration",
            "type": "object",
            "properties": {
                "mutex": {
                    "description": "Mutex holds the Mutex lock details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Mutex"
                },
                "semaphore": {
                    "description": "Semaphore holds the Semaphore configuration",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Synchronization",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.SynchronizationStatus": {
            "description": "SynchronizationStatus stores the status of semaphore and mutex.",
            "type": "object",
            "properties": {
                "mutex": {
                    "description": "Mutex stores this workflow's mutex holder details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.MutexStatus"
                },
                "semaphore": {
                    "description": "Semaphore stores this workflow's Semaphore holder details",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SemaphoreStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "SynchronizationStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TTLStrategy": {
            "description": "TTLStrategy is the strategy for the time to live depending on if the workflow succeeded or failed",
            "type": "object",
            "properties": {
                "secondsAfterCompletion": {
                    "description": "SecondsAfterCompletion is the number of seconds to live after completion",
                    "type": "integer",
                    "format": "int32"
                },
                "secondsAfterFailure": {
                    "description": "SecondsAfterFailure is the number of seconds to live after failure",
                    "type": "integer",
                    "format": "int32"
                },
                "secondsAfterSuccess": {
                    "description": "SecondsAfterSuccess is the number of seconds to live after success",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TTLStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TarStrategy": {
            "description": "TarStrategy will tar and gzip the file or directory when saving",
            "type": "object",
            "properties": {
                "compressionLevel": {
                    "description": "CompressionLevel specifies the gzip compression level to use for the artifact. Defaults to gzip.DefaultCompression.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TarStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Template": {
            "description": "Template is a reusable and composable unit of execution in a workflow",
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds relative to the StartTime that the pod may be active on a node before the system actively tries to terminate the pod; value must be positive integer This field is only applicable to container and script templates.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "affinity": {
                    "description": "Affinity sets the pod's scheduling constraints Overrides the affinity set at the workflow level (if any)",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "archiveLocation": {
                    "description": "Location in which all files related to the step will be stored (logs, artifacts, etc...). Can be overridden by individual items in Outputs. If omitted, will use the default artifact repository location configured in the controller, appended with the \u003cworkflowname\u003e/\u003cnodename\u003e in the key.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactLocation"
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.",
                    "type": "boolean"
                },
                "container": {
                    "description": "Container is the main container image to run in the pod",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                },
                "containerSet": {
                    "description": "ContainerSet groups multiple containers within a single pod.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContainerSetTemplate"
                },
                "daemon": {
                    "description": "Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness",
                    "type": "boolean"
                },
                "dag": {
                    "description": "DAG template subtype which runs a DAG",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.DAGTemplate"
                },
                "data": {
                    "description": "Data is a data template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Data"
                },
                "executor": {
                    "description": "Executor holds configurations of the executor container.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ExecutorConfig"
                },
                "failFast": {
                    "description": "FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with `withItems`, etc.",
                    "type": "boolean"
                },
                "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod spec",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "http": {
                    "description": "HTTP makes a HTTP request",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.HTTP"
                },
                "initContainers": {
                    "description": "InitContainers is a list of containers which run before the main container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.UserContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "inputs": {
                    "description": "Inputs describe what inputs parameters and artifacts are supplied to this template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Inputs"
                },
                "memoize": {
                    "description": "Memoize allows templates to use outputs generated from already executed templates",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Memoize"
                },
                "metadata": {
                    "description": "Metdata sets the pods's metadata, i.e. annotations and labels",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "metrics": {
                    "description": "Metrics are a list of metrics emitted from this template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metrics"
                },
                "name": {
                    "description": "Name is the name of the template",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "outputs": {
                    "description": "Outputs describe the parameters and artifacts that this template produces",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "parallelism": {
                    "description": "Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.",
                    "type": "integer",
                    "format": "int64"
                },
                "plugin": {
                    "description": "Plugin is a plugin template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Plugin"
                },
                "podSpecPatch": {
                    "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority to apply to workflow pods.",
                    "type": "integer",
                    "format": "int32"
                },
                "priorityClassName": {
                    "description": "PriorityClassName to apply to workflow pods.",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource template subtype which can run k8s resources",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ResourceTemplate"
                },
                "retryStrategy": {
                    "description": "RetryStrategy describes how to retry a template when it fails",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryStrategy"
                },
                "schedulerName": {
                    "description": "If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.",
                    "type": "string"
                },
                "script": {
                    "description": "Script runs a portion of code against an interpreter",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ScriptTemplate"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName to apply to workflow pods",
                    "type": "string"
                },
                "sidecars": {
                    "description": "Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.UserContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "steps": {
                    "description": "Steps define a series of sequential/parallel workflow steps",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ParallelSteps"
                    }
                },
                "suspend": {
                    "description": "Suspend template subtype which can suspend a workflow when reaching the step",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SuspendTemplate"
                },
                "synchronization": {
                    "description": "Synchronization holds synchronization lock configuration for this template",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Synchronization"
                },
                "timeout": {
                    "description": "Timeout allows to set the total node execution timeout duration counting from the node's start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.",
                    "type": "string"
                },
                "tolerations": {
                    "description": "Tolerations to apply to workflow pods.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    },
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a template.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Template",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TemplateRef": {
            "description": "TemplateRef is a reference of template resource.",
            "type": "object",
            "properties": {
                "clusterScope": {
                    "description": "ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the resource name of the template.",
                    "type": "string"
                },
                "template": {
                    "description": "Template is the name of referred template in the resource.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TemplateRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.TransformationStep": {
            "type": "object",
            "required": [
                "expression"
            ],
            "properties": {
                "expression": {
                    "description": "Expression defines an expr expression to apply",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "TransformationStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.UserContainer": {
            "description": "UserContainer is a container specified by a user.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "mirrorVolumeMounts": {
                    "description": "MirrorVolumeMounts will mount the same volumes specified in the main container to the container (including artifacts), at the same mountPaths. This enables dind daemon to partially see the same filesystem as the main container in order to use features such as docker volume binding",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "UserContainer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ValueFrom": {
            "description": "ValueFrom describes a location in which to obtain the value to a parameter",
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "ConfigMapKeyRef is configmap selector for input parameter configuration",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
                },
                "default": {
                    "description": "Default specifies a value to be used if retrieving the value from the specified source fails",
                    "type": "string"
                },
                "event": {
                    "description": "Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. `payload.message`",
                    "type": "string"
                },
                "expression": {
                    "description": "Expression, if defined, is evaluated to specify the value for the parameter",
                    "type": "string"
                },
                "jqFilter": {
                    "description": "JQFilter expression against the resource object in resource templates",
                    "type": "string"
                },
                "jsonPath": {
                    "description": "JSONPath of a resource to retrieve an output parameter value from in resource templates",
                    "type": "string"
                },
                "parameter": {
                    "description": "Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. '{{steps.mystep.outputs.myparam}}')",
                    "type": "string"
                },
                "path": {
                    "description": "Path in the container to retrieve an output parameter value from in container templates",
                    "type": "string"
                },
                "supplied": {
                    "description": "Supplied value to be filled in directly, either through the CLI, API, etc.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SuppliedValueFrom"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ValueFrom",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Version": {
            "type": "object",
            "required": [
                "version",
                "buildDate",
                "gitCommit",
                "gitTag",
                "gitTreeState",
                "goVersion",
                "compiler",
                "platform"
            ],
            "properties": {
                "buildDate": {
                    "type": "string",
                    "default": ""
                },
                "compiler": {
                    "type": "string",
                    "default": ""
                },
                "gitCommit": {
                    "type": "string",
                    "default": ""
                },
                "gitTag": {
                    "type": "string",
                    "default": ""
                },
                "gitTreeState": {
                    "type": "string",
                    "default": ""
                },
                "goVersion": {
                    "type": "string",
                    "default": ""
                },
                "platform": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Version",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.VolumeClaimGC": {
            "description": "VolumeClaimGC describes how to delete volumes from completed Workflows",
            "type": "object",
            "properties": {
                "strategy": {
                    "description": "Strategy is the strategy to use. One of \"OnWorkflowCompletion\", \"OnWorkflowSuccess\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "VolumeClaimGC",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.Workflow": {
            "description": "Workflow is the definition of a workflow resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "Workflow",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowArtifactGCTask": {
            "description": "WorkflowArtifactGCTask specifies the Artifacts that need to be deleted as well as the status of deletion",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGCSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGCStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowArtifactGCTask",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowArtifactGCTaskList": {
            "description": "WorkflowArtifactGCTaskList is list of WorkflowArtifactGCTask resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowArtifactGCTask"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowArtifactGCTaskList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowEventBinding": {
            "description": "WorkflowEventBinding is the definition of an event resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowEventBindingSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowEventBinding",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowEventBindingList": {
            "description": "WorkflowEventBindingList is list of event resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowEventBinding"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowEventBindingList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowEventBindingSpec": {
            "type": "object",
            "required": [
                "event"
            ],
            "properties": {
                "event": {
                    "description": "Event is the event to bind to",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Event"
                },
                "submit": {
                    "description": "Submit is the workflow template to submit",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Submit"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowEventBindingSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowList": {
            "description": "WorkflowList is list of Workflow resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowMetadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labelsFrom": {
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LabelValueFrom"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowSpec": {
            "description": "WorkflowSpec is the specification of a Workflow.",
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the workflow. A value of zero is used to terminate a Running workflow",
                    "type": "integer",
                    "format": "int64"
                },
                "affinity": {
                    "description": "Affinity sets the scheduling constraints for all pods in the workflow. Can be overridden by an affinity specified in the template",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "archiveLogs": {
                    "description": "ArchiveLogs indicates if the container logs should be archived",
                    "type": "boolean"
                },
                "arguments": {
                    "description": "Arguments contain the parameters and artifacts sent to the workflow entrypoint Parameters are referencable globally using the 'workflow' variable prefix. e.g. {{workflow.parameters.myparam}}",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "artifactGC": {
                    "description": "ArtifactGC describes the strategy to use when deleting artifacts from completed or deleted workflows (applies to all output Artifacts unless Artifact.ArtifactGC is specified, which overrides this)",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactGC"
                },
                "artifactRepositoryRef": {
                    "description": "ArtifactRepositoryRef specifies the configMap name and key containing the artifact repository config.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactRepositoryRef"
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.",
                    "type": "boolean"
                },
                "dnsConfig": {
                    "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
                },
                "dnsPolicy": {
                    "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
                    "type": "string"
                },
                "entrypoint": {
                    "description": "Entrypoint is a template reference to the starting point of the workflow.",
                    "type": "string"
                },
                "executor": {
                    "description": "Executor holds configurations of executor containers of the workflow.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ExecutorConfig"
                },
                "hooks": {
                    "description": "Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LifecycleHook"
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "x-kubernetes-patch-merge-key": "ip",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "hostNetwork": {
                    "description": "Host networking requested for this workflow pod. Default to false.",
                    "type": "boolean"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "metrics": {
                    "description": "Metrics are a list of metrics emitted from this Workflow",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metrics"
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "onExit": {
                    "description": "OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary workflow.",
                    "type": "string"
                },
                "parallelism": {
                    "description": "Parallelism limits the max total parallel pods that can execute at the same time in a workflow",
                    "type": "integer",
                    "format": "int64"
                },
                "podDisruptionBudget": {
                    "description": "PodDisruptionBudget holds the number of concurrent disruptions that you allow for Workflow's Pods. Controller will automatically add the selector with workflow name, if selector is empty. Optional: Defaults to empty.",
                    "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec"
                },
                "podGC": {
                    "description": "PodGC describes the strategy to use when deleting completed pods",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.PodGC"
                },
                "podMetadata": {
                    "description": "PodMetadata defines additional metadata that should be applied to workflow pods",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Metadata"
                },
                "podPriority": {
                    "description": "Priority to apply to workflow pods. DEPRECATED: Use PodPriorityClassName instead.",
                    "type": "integer",
                    "format": "int32"
                },
                "podPriorityClassName": {
                    "description": "PriorityClassName to apply to workflow pods.",
                    "type": "string"
                },
                "podSpecPatch": {
                    "description": "PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.",
                    "type": "integer",
                    "format": "int32"
                },
                "retryStrategy": {
                    "description": "RetryStrategy for all templates in the workflow.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.RetryStrategy"
                },
                "schedulerName": {
                    "description": "Set scheduler name for all pods. Will be overridden if container/script template's scheduler name is set. Default scheduler will be used if neither specified.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
                },
                "serviceAccountName": {
                    "description": "ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.",
                    "type": "string"
                },
                "shutdown": {
                    "description": "Shutdown will shutdown the workflow according to its ShutdownStrategy",
                    "type": "string"
                },
                "suspend": {
                    "description": "Suspend will suspend the workflow and prevent execution of any future steps in the workflow",
                    "type": "boolean"
                },
                "synchronization": {
                    "description": "Synchronization holds synchronization lock configuration for this Workflow",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Synchronization"
                },
                "templateDefaults": {
                    "description": "TemplateDefaults holds default template values that will apply to all templates in the Workflow, unless overridden on the template-level",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                },
                "templates": {
                    "description": "Templates is a list of workflow templates used in a workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "tolerations": {
                    "description": "Tolerations to apply to workflow pods.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    },
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "ttlStrategy": {
                    "description": "TTLStrategy limits the lifetime of a Workflow that has finished execution depending on if it Succeeded or Failed. If this struct is set, once the Workflow finishes, it will be deleted after the time to live expires. If this field is unset, the controller config map will hold the default values.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TTLStrategy"
                },
                "volumeClaimGC": {
                    "description": "VolumeClaimGC describes the strategy to use when deleting volumes from completed workflows",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.VolumeClaimGC"
                },
                "volumeClaimTemplates": {
                    "description": "VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumes": {
                    "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workflowMetadata": {
                    "description": "WorkflowMetadata contains some metadata of the workflow to refer to",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowMetadata"
                },
                "workflowTemplateRef": {
                    "description": "WorkflowTemplateRef holds a reference to a WorkflowTemplate for execution",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplateRef"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowStatus": {
            "description": "WorkflowStatus contains overall status information about a workflow",
            "type": "object",
            "properties": {
                "artifactGCStatus": {
                    "description": "ArtifactGCStatus maintains the status of Artifact Garbage Collection",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtGCStatus"
                },
                "artifactRepositoryRef": {
                    "description": "ArtifactRepositoryRef is used to cache the repository to use so we do not need to determine it everytime we reconcile.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ArtifactRepositoryRefStatus"
                },
                "compressedNodes": {
                    "description": "Compressed and base64 decoded Nodes map",
                    "type": "string"
                },
                "conditions": {
                    "description": "Conditions is a list of conditions the Workflow may have",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Condition"
                    }
                },
                "estimatedDuration": {
                    "description": "EstimatedDuration in seconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "finishedAt": {
                    "description": "Time at which this workflow completed",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about why the workflow is in this condition.",
                    "type": "string"
                },
                "nodes": {
                    "description": "Nodes is a mapping between a node ID and the node's status.",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeStatus"
                    }
                },
                "offloadNodeStatusVersion": {
                    "description": "Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.",
                    "type": "string"
                },
                "outputs": {
                    "description": "Outputs captures output values and artifact locations produced by the workflow via global outputs",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "persistentVolumeClaims": {
                    "description": "PersistentVolumeClaims tracks all PVCs that were created as part of the workflow. The contents of this list are drained at the end of the workflow.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "phase": {
                    "description": "Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \"\" (Unknown), \"Pending\", or \"Running\" before the workflow is completed, and \"Succeeded\", \"Failed\" or \"Error\" once the workflow has completed.",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress to completion",
                    "type": "string"
                },
                "resourcesDuration": {
                    "description": "ResourcesDuration is the total for the workflow",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64",
                        "default": 0
                    }
                },
                "startedAt": {
                    "description": "Time at which this workflow started",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "storedTemplates": {
                    "description": "StoredTemplates is a mapping between a template ref and the node's status.",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                    }
                },
                "storedWorkflowTemplateSpec": {
                    "description": "StoredWorkflowSpec stores the WorkflowTemplate spec for future execution.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                },
                "synchronization": {
                    "description": "Synchronization stores the status of synchronization locks",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.SynchronizationStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowStep": {
            "description": "WorkflowStep is a reference to a template to execute in a series of step",
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments hold arguments to the template",
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Arguments"
                },
                "continueOn": {
                    "description": "ContinueOn makes argo to proceed with the following step even if this step fails. Errors and Failed states can be specified",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.ContinueOn"
                },
                "hooks": {
                    "description": "Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.LifecycleHook"
                    }
                },
                "inline": {
                    "description": "Inline is the template. Template must be empty if this is declared (and vice-versa).",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                },
                "name": {
                    "description": "Name of the step",
                    "type": "string"
                },
                "onExit": {
                    "description": "OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.",
                    "type": "string"
                },
                "template": {
                    "description": "Template is the name of the template to execute as the step",
                    "type": "string"
                },
                "templateRef": {
                    "description": "TemplateRef is the reference to the template resource to execute as the step.",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.TemplateRef"
                },
                "when": {
                    "description": "When is an expression in which the step should conditionally execute",
                    "type": "string"
                },
                "withItems": {
                    "description": "WithItems expands a step into multiple parallel steps from the items in the list",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Item"
                    }
                },
                "withParam": {
                    "description": "WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.",
                    "type": "string"
                },
                "withSequence": {
                    "description": "WithSequence expands a step into a numeric sequence",
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Sequence"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowStep",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskResult": {
            "description": "WorkflowTaskResult is a used to communicate a result back to the controller. Unlike WorkflowTaskSet, it has more capacity. This is an internal type. Users should never create this resource directly, much like you would never create a ReplicaSet directly.",
            "type": "object",
            "required": [
                "metadata"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "outputs": {
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Outputs"
                },
                "phase": {
                    "type": "string"
                },
                "progress": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskResult",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskResultList": {
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskResult"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskResultList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSet": {
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSetList": {
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTaskSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSetSpec": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Template"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTaskSetStatus": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.NodeResult"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTaskSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTemplate": {
            "description": "WorkflowTemplate is the definition of a workflow template resource",
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTemplateList": {
            "description": "WorkflowTemplateList is list of WorkflowTemplate resources",
            "type": "object",
            "required": [
                "metadata",
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTemplateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.WorkflowTemplateRef": {
            "description": "WorkflowTemplateRef is a reference to a WorkflowTemplate resource.",
            "type": "object",
            "properties": {
                "clusterScope": {
                    "description": "ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the resource name of the workflow template.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "WorkflowTemplateRef",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.argoproj.workflow.v1alpha1.ZipStrategy": {
            "description": "ZipStrategy will unzip zipped input artifacts",
            "type": "object",
            "x-kubernetes-group-version-kind": [
                {
                    "group": "argoproj.io",
                    "kind": "ZipStrategy",
                    "version": "v1alpha1"
                }
            ]
        }
    }
}